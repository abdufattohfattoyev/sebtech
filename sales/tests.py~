# sales/tests.py
from django.test import TestCase, TransactionTestCase
from django.contrib.auth.models import User
from django.utils import timezone
from decimal import Decimal
from datetime import timedelta

from shops.models import Shop, Customer
from inventory.models import Phone, PhoneModel, MemorySize, Accessory
from .models import (
    PhoneSale, AccessorySale, PhoneExchange, PhoneReturn,
    Debt, DebtPayment, Expense
)


class BaseTestCase(TransactionTestCase):
    """Asosiy test klassi - umumiy ma'lumotlar"""

    def setUp(self):
        """Test uchun zarur ma'lumotlarni yaratish"""
        # Foydalanuvchilar
        self.boss = User.objects.create_user(
            username='boss',
            password='test123',
            first_name='Boss',
            last_name='User'
        )

        self.seller = User.objects.create_user(
            username='seller',
            password='test123',
            first_name='Seller',
            last_name='User'
        )

        # Do'kon
        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.boss
        )

        # Telefon modeli va xotira
        self.phone_model = PhoneModel.objects.create(
            model_name='iPhone 15'
        )

        self.memory_size = MemorySize.objects.create(
            size='256GB'
        )

        # Telefon
        self.phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='123456789012345',
            condition_percentage=95,
            status='shop',
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            cost_price=Decimal('820.00'),
            created_by=self.boss
        )

        # Aksessuar
        self.accessory = Accessory.objects.create(
            shop=self.shop,
            name='Phone Case',
            code='0001',
            quantity=100,
            purchase_price=Decimal('50000'),
            sale_price=Decimal('80000'),
            created_by=self.boss
        )

        # Mijoz
        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='+998901234567',
            created_by=self.seller
        )


# ============ PHONE SALE TESTS ============
class PhoneSaleTestCase(BaseTestCase):
    """Telefon sotish testlari"""

    def test_create_phone_sale_with_debt_by_seller(self):
        """Xodim qarz bilan telefon sotadi - 2 ta qarz yaratilishi kerak"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('700.00'),
            card_amount=Decimal('0'),
            credit_amount=Decimal('0'),
            debt_amount=Decimal('300.00'),
            salesman=self.seller,
            customer=self.customer,
            sale_date=timezone.now().date()
        )

        # Telefon statusini tekshirish
        self.phone.refresh_from_db()
        self.assertEqual(self.phone.status, 'sold')

        # Qarzlarni tekshirish
        customer_debts = Debt.objects.filter(
            debt_type='customer_to_seller',
            customer=self.customer,
            currency='USD'
        )
        self.assertEqual(customer_debts.count(), 0)  # Form orqali yaratilganda

        # Form orqali yaratish kerak
        from .forms import PhoneSaleForm
        form_data = {
            'phone': self.phone.id,
            'sale_price': '1000.00',
            'cash_amount': '700.00',
            'card_amount': '0',
            'credit_amount': '0',
            'debt_amount': '300.00',
            'sale_date': timezone.now().date(),
            'customer_name': self.customer.name,
            'customer_phone': self.customer.phone_number,
            'debt_due_date': (timezone.now().date() + timedelta(days=30))
        }

        # Yangi telefon yaratish
        new_phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='999888777666555',
            condition_percentage=95,
            status='shop',
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            cost_price=Decimal('820.00'),
            created_by=self.boss
        )
        form_data['phone'] = new_phone.id

        form = PhoneSaleForm(data=form_data, user=self.seller)
        if form.is_valid():
            phone_sale = form.save()

            # 2 ta qarz yaratilgan bo'lishi kerak
            customer_debts = Debt.objects.filter(
                debt_type='customer_to_seller',
                customer=self.customer,
                creditor=self.seller,
                currency='USD'
            )
            self.assertEqual(customer_debts.count(), 1)
            self.assertEqual(customer_debts.first().debt_amount, Decimal('300.00'))

            seller_debts = Debt.objects.filter(
                debt_type='seller_to_boss',
                debtor=self.seller,
                creditor=self.boss,
                currency='USD'
            )
            self.assertEqual(seller_debts.count(), 1)
            self.assertEqual(seller_debts.first().debt_amount, Decimal('300.00'))

    def test_create_phone_sale_with_debt_by_boss(self):
        """Boss qarz bilan telefon sotadi - 1 ta qarz yaratilishi kerak"""
        new_phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='111222333444555',
            condition_percentage=95,
            status='shop',
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            cost_price=Decimal('820.00'),
            created_by=self.boss
        )

        from .forms import PhoneSaleForm
        form_data = {
            'phone': new_phone.id,
            'sale_price': '1000.00',
            'cash_amount': '600.00',
            'card_amount': '0',
            'credit_amount': '0',
            'debt_amount': '400.00',
            'sale_date': timezone.now().date(),
            'customer_name': self.customer.name,
            'customer_phone': self.customer.phone_number,
            'debt_due_date': (timezone.now().date() + timedelta(days=30))
        }

        form = PhoneSaleForm(data=form_data, user=self.boss)
        if form.is_valid():
            phone_sale = form.save()

            # Faqat 1 ta qarz (mijoz → boss)
            customer_debts = Debt.objects.filter(
                debt_type='customer_to_seller',
                customer=self.customer,
                creditor=self.boss,
                currency='USD'
            )
            self.assertEqual(customer_debts.count(), 1)

            # Boss → Boss qarz bo'lmasligi kerak
            seller_debts = Debt.objects.filter(
                debt_type='seller_to_boss',
                debtor=self.boss,
                currency='USD'
            )
            self.assertEqual(seller_debts.count(), 0)

    def test_update_phone_sale_keeps_original_salesman(self):
        """Telefon sotishni yangilashda asl sotuvchi saqlanishi"""
        # Xodim sotyapti
        new_phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='555444333222111',
            condition_percentage=95,
            status='shop',
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            cost_price=Decimal('820.00'),
            created_by=self.boss
        )

        phone_sale = PhoneSale.objects.create(
            phone=new_phone,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            salesman=self.seller,
            customer=self.customer,
            sale_date=timezone.now().date()
        )

        original_salesman = phone_sale.salesman

        # Boss tahrirlaydi
        phone_sale.sale_price = Decimal('1100.00')
        phone_sale.cash_amount = Decimal('1100.00')
        phone_sale.save()

        # View'da ham saqlanadi
        from .views import phone_sale_edit
        # Sotuvchi o'zgarmasligi kerak
        self.assertEqual(phone_sale.salesman, original_salesman)

    def test_delete_phone_sale_removes_debts(self):
        """Telefon sotish o'chirilganda qarzlar ham o'chishi"""
        new_phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='666777888999000',
            condition_percentage=95,
            status='shop',
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            cost_price=Decimal('820.00'),
            created_by=self.boss
        )

        from .forms import PhoneSaleForm
        form_data = {
            'phone': new_phone.id,
            'sale_price': '1000.00',
            'cash_amount': '500.00',
            'debt_amount': '500.00',
            'sale_date': timezone.now().date(),
            'customer_name': self.customer.name,
            'customer_phone': self.customer.phone_number,
            'debt_due_date': (timezone.now().date() + timedelta(days=30))
        }

        form = PhoneSaleForm(data=form_data, user=self.seller)
        if form.is_valid():
            phone_sale = form.save()

            # Qarzlar yaratilganini tekshirish
            debt_count_before = Debt.objects.filter(
                customer=self.customer,
                currency='USD'
            ).count()
            self.assertGreater(debt_count_before, 0)

            # PhoneSale ni o'chirish
            phone_sale.delete()

            # Qarzlar o'chirilganini tekshirish
            debt_count_after = Debt.objects.filter(
                customer=self.customer,
                currency='USD'
            ).count()
            self.assertEqual(debt_count_after, 0)

            # Telefon shop holatiga qaytganini tekshirish
            new_phone.refresh_from_db()
            self.assertEqual(new_phone.status, 'shop')


# ============ ACCESSORY SALE TESTS ============
class AccessorySaleTestCase(BaseTestCase):
    """Aksessuar sotish testlari"""

    def test_create_accessory_sale_with_debt(self):
        """Aksessuar qarz bilan sotish"""
        from .forms import AccessorySaleForm

        form_data = {
            'accessory': self.accessory.id,
            'quantity': 5,
            'unit_price': '80000',
            'cash_amount': '200000',
            'card_amount': '0',
            'credit_amount': '0',
            'debt_amount': '200000',
            'sale_date': timezone.now().date(),
            'customer_name': self.customer.name,
            'customer_phone': self.customer.phone_number,
            'debt_due_date': (timezone.now().date() + timedelta(days=30))
        }

        form = AccessorySaleForm(data=form_data, user=self.seller)
        if form.is_valid():
            accessory_sale = form.save()

            # Aksessuar soni kamayganini tekshirish
            self.accessory.refresh_from_db()
            self.assertEqual(self.accessory.quantity, 95)

            # Qarz yaratilganini tekshirish
            customer_debts = Debt.objects.filter(
                debt_type='customer_to_seller',
                customer=self.customer,
                currency='UZS'
            )
            self.assertEqual(customer_debts.count(), 1)

    def test_delete_accessory_sale_returns_quantity(self):
        """Aksessuar sotish o'chirilganda son qaytishi"""
        accessory_sale = AccessorySale.objects.create(
            accessory=self.accessory,
            quantity=10,
            unit_price=Decimal('80000'),
            total_price=Decimal('800000'),
            cash_amount=Decimal('800000'),
            salesman=self.seller,
            customer=self.customer,
            sale_date=timezone.now().date()
        )

        # Aksessuar soni kamayganini tekshirish
        self.accessory.quantity -= 10
        self.accessory.save()
        self.accessory.refresh_from_db()
        self.assertEqual(self.accessory.quantity, 90)

        # O'chirish
        accessory_sale.delete()

        # Son qaytganini tekshirish
        self.accessory.refresh_from_db()
        self.assertEqual(self.accessory.quantity, 100)


# ============ PHONE EXCHANGE TESTS ============
class PhoneExchangeTestCase(BaseTestCase):
    """Telefon almashtirish testlari"""

    def test_create_phone_exchange_with_debt(self):
        """Telefon almashtirish qarz bilan"""
        from .forms import PhoneExchangeForm

        form_data = {
            'new_phone': self.phone.id,
            'new_phone_price': '1000.00',
            'old_phone_model': self.phone_model.id,
            'old_phone_memory': self.memory_size.id,
            'old_phone_imei': '999888777666544',
            'old_phone_condition_percentage': 80,
            'old_phone_accepted_price': '700.00',
            'old_phone_repair_cost': '0',
            'old_phone_imei_cost': '0',
            'old_phone_future_sale_price': '750.00',
            'exchange_type': 'customer_pays',
            'cash_amount': '100.00',
            'debt_amount': '200.00',
            'exchange_date': timezone.now().date(),
            'customer_name_input': 'Exchange Customer',
            'customer_phone_input': '+998901111111',
            'debt_due_date': (timezone.now().date() + timedelta(days=30))
        }

        form = PhoneExchangeForm(data=form_data, user=self.seller)
        if form.is_valid():
            exchange = form.save()

            # Yangi telefon sold bo'lganini tekshirish
            self.phone.refresh_from_db()
            self.assertEqual(self.phone.status, 'sold')

            # Eski telefon yaratilganini tekshirish
            self.assertIsNotNone(exchange.created_old_phone)
            self.assertEqual(exchange.created_old_phone.status, 'shop')

            # Qarz yaratilganini tekshirish
            debts = Debt.objects.filter(
                customer=exchange.customer,
                currency='USD'
            )
            self.assertGreater(debts.count(), 0)

    def test_delete_phone_exchange_removes_old_phone(self):
        """Telefon almashtirish o'chirilganda eski telefon ham o'chishi"""
        exchange = PhoneExchange.objects.create(
            new_phone=self.phone,
            new_phone_price=Decimal('1000.00'),
            old_phone_model=self.phone_model,
            old_phone_memory=self.memory_size,
            old_phone_accepted_price=Decimal('700.00'),
            exchange_type='customer_pays',
            price_difference=Decimal('300.00'),
            cash_amount=Decimal('300.00'),
            salesman=self.seller,
            customer_name='Test',
            customer_phone_number='+998901111111',
            customer=self.customer,
            exchange_date=timezone.now().date()
        )

        # Eski telefon yaratish
        old_phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='111222333444666',
            condition_percentage=80,
            status='shop',
            purchase_price=Decimal('700.00'),
            sale_price=Decimal('750.00'),
            cost_price=Decimal('700.00'),
            created_by=self.seller,
            source_type='exchange'
        )
        exchange.created_old_phone = old_phone
        exchange.save()

        old_phone_id = old_phone.id

        # O'chirish
        exchange.delete()

        # Eski telefon o'chirilganini tekshirish
        self.assertFalse(Phone.objects.filter(id=old_phone_id).exists())

        # Yangi telefon shop holatiga qaytganini tekshirish
        self.phone.refresh_from_db()
        self.assertEqual(self.phone.status, 'shop')


# ============ PHONE RETURN TESTS ============
class PhoneReturnTestCase(BaseTestCase):
    """Telefon qaytarish testlari"""

    def test_create_phone_return(self):
        """Telefon qaytarish"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            salesman=self.seller,
            customer=self.customer,
            sale_date=timezone.now().date()
        )

        phone_return = PhoneReturn.objects.create(
            phone_sale=phone_sale,
            return_amount=Decimal('1000.00'),
            return_date=timezone.now().date(),
            reason='Defective',
            created_by=self.boss
        )

        # Telefon returned holatiga o'tganini tekshirish
        self.phone.refresh_from_db()
        self.assertEqual(self.phone.status, 'returned')

    def test_delete_phone_return_restores_status(self):
        """Telefon qaytarish o'chirilganda telefon sold holatiga qaytishi"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            salesman=self.seller,
            customer=self.customer,
            sale_date=timezone.now().date()
        )

        phone_return = PhoneReturn.objects.create(
            phone_sale=phone_sale,
            return_amount=Decimal('1000.00'),
            return_date=timezone.now().date(),
            reason='Changed mind',
            created_by=self.boss
        )

        # O'chirish
        phone_return.delete()

        # Telefon sold holatiga qaytganini tekshirish
        self.phone.refresh_from_db()
        self.assertEqual(self.phone.status, 'sold')


# ============ DEBT PAYMENT TESTS ============
class DebtPaymentTestCase(BaseTestCase):
    """Qarz to'lovlari testlari"""

    def test_debt_payment_updates_paid_amount(self):
        """To'lov qo'shilganda paid_amount yangilanishi"""
        debt = Debt.objects.create(
            debt_type='customer_to_seller',
            creditor=self.seller,
            customer=self.customer,
            currency='USD',
            debt_amount=Decimal('500.00'),
            paid_amount=Decimal('0'),
            due_date=timezone.now().date() + timedelta(days=30),
            status='active'
        )

        # To'lov qo'shish
        payment1 = DebtPayment.objects.create(
            debt=debt,
            payment_amount=Decimal('200.00'),
            payment_date=timezone.now().date(),
            received_by=self.seller
        )

        # paid_amount yangilanganini tekshirish
        debt.refresh_from_db()
        self.assertEqual(debt.paid_amount, Decimal('200.00'))
        self.assertEqual(debt.status, 'active')

        # Yana to'lov
        payment2 = DebtPayment.objects.create(
            debt=debt,
            payment_amount=Decimal('300.00'),
            payment_date=timezone.now().date(),
            received_by=self.seller
        )

        debt.refresh_from_db()
        self.assertEqual(debt.paid_amount, Decimal('500.00'))
        self.assertEqual(debt.status, 'paid')

    def test_delete_debt_payment_updates_amount(self):
        """To'lov o'chirilganda paid_amount yangilanishi"""
        debt = Debt.objects.create(
            debt_type='customer_to_seller',
            creditor=self.seller,
            customer=self.customer,
            currency='USD',
            debt_amount=Decimal('500.00'),
            paid_amount=Decimal('0'),
            due_date=timezone.now().date() + timedelta(days=30),
            status='active'
        )

        payment = DebtPayment.objects.create(
            debt=debt,
            payment_amount=Decimal('200.00'),
            payment_date=timezone.now().date(),
            received_by=self.seller
        )

        # O'chirish
        payment.delete()

        # paid_amount 0 ga qaytganini tekshirish
        debt.refresh_from_db()
        self.assertEqual(debt.paid_amount, Decimal('0'))
        self.assertEqual(debt.status, 'active')


# ============ RUN ALL TESTS ============
class FullIntegrationTestCase(BaseTestCase):
    """To'liq integratsiya testlari"""

    def test_complete_sale_cycle_with_debts(self):
        """To'liq sotish sikli qarzlar bilan"""
        # 1. Telefon sotish (qarz bilan)
        new_phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='123123123123123',
            condition_percentage=95,
            status='shop',
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            cost_price=Decimal('820.00'),
            created_by=self.boss
        )

        from .forms import PhoneSaleForm
        form_data = {
            'phone': new_phone.id,
            'sale_price': '1000.00',
            'cash_amount': '600.00',
            'debt_amount': '400.00',
            'sale_date': timezone.now().date(),
            'customer_name': self.customer.name,
            'customer_phone': self.customer.phone_number,
            'debt_due_date': (timezone.now().date() + timedelta(days=30))
        }

        form = PhoneSaleForm(data=form_data, user=self.seller)
        self.assertTrue(form.is_valid())
        phone_sale = form.save()

        # 2. Qarzlar yaratilganini tekshirish
        debts_count_initial = Debt.objects.filter(customer=self.customer, currency='USD').count()
        self.assertGreater(debts_count_initial, 0)

        # 3. To'lov qo'shish
        debt = Debt.objects.filter(
            debt_type='customer_to_seller',
            customer=self.customer,
            currency='USD'
        ).first()

        if debt:
            DebtPayment.objects.create(
                debt=debt,
                payment_amount=Decimal('200.00'),
                payment_date=timezone.now().date(),
                received_by=self.seller
            )

            debt.refresh_from_db()
            self.assertEqual(debt.remaining_amount, Decimal('200.00'))

        # 4. Telefon sotishni o'chirish
        phone_sale.delete()

        # 5. Qarzlar o'chirilganini tekshirish
        debts_count_after = Debt.objects.filter(customer=self.customer, currency='USD').count()
        self.assertEqual(debts_count_after, 0)

        # 6. Telefon shop holatiga qaytganini tekshirish
        new_phone.refresh_from_db()
        self.assertEqual(new_phone.status, 'shop')

        print("\n✅ To'liq sikl test muvaffaqiyatli!")

# Test ishga tushirish:
# python manage.py test sales.tests