# sales/models.py
from django.db import models
from django.core.exceptions import ValidationError
from django.core.validators import MinValueValidator, MaxValueValidator, RegexValidator
from django.utils import timezone
from django.contrib.auth.models import User
from django.db.models import Sum
from decimal import Decimal
from shops.models import Shop, Customer
from inventory.models import Phone, Accessory, PhoneModel, MemorySize


# ============ BASE MODELS ============
class Expense(models.Model):
    """Xarajatlar modeli"""
    shop = models.ForeignKey(Shop, on_delete=models.CASCADE, related_name="expenses", verbose_name="Do'kon")
    name = models.CharField(max_length=200, verbose_name="Xarajat nomi")
    amount = models.DecimalField(
        max_digits=12, decimal_places=2,
        validators=[MinValueValidator(0)],
        verbose_name="Summa (so'm)"
    )
    expense_date = models.DateField(default=timezone.now, verbose_name="Xarajat sanasi")
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                   verbose_name="Qo'shgan foydalanuvchi")
    notes = models.TextField(null=True, blank=True, verbose_name="Izoh")

    class Meta:
        verbose_name = "Xarajat"
        verbose_name_plural = "Xarajatlar"
        ordering = ['-expense_date']

    def __str__(self):
        return f"{self.name} - {self.amount:,.0f} so'm"


# ============ DEBT MODELS ============
class Debt(models.Model):
    """Qarzlar modeli - USD va UZS valyutalari bilan"""
    DEBT_TYPE_CHOICES = [
        ('customer_to_seller', 'Mijoz → Sotuvchi'),
        ('seller_to_boss', 'Sotuvchi → Boshliq'),
        ('boss_to_master', 'Boshliq → Usta'),
    ]
    DEBT_STATUS_CHOICES = [
        ('active', 'Faol'),
        ('paid', "To'langan"),
        ('cancelled', 'Bekor qilingan'),
    ]
    CURRENCY_CHOICES = [
        ('USD', 'Dollar'),
        ('UZS', "So'm"),
    ]

    debt_type = models.CharField(max_length=20, choices=DEBT_TYPE_CHOICES, verbose_name="Qarz turi")
    creditor = models.ForeignKey(User, on_delete=models.CASCADE, related_name="given_debts",
                                 verbose_name="Qarz bergan")
    debtor = models.ForeignKey(User, on_delete=models.CASCADE, related_name="received_debts",
                               null=True, blank=True, verbose_name="Qarz olgan (Foydalanuvchi)")
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="debts",
                                 null=True, blank=True, verbose_name="Qarz olgan (Mijoz)")
    master = models.ForeignKey('services.Master', on_delete=models.CASCADE, related_name="debts",
                               null=True, blank=True, verbose_name="Qarz olgan (Usta)")

    currency = models.CharField(max_length=3, choices=CURRENCY_CHOICES, default='USD', verbose_name="Valyuta")
    debt_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0.00, verbose_name="Qarz summasi")
    paid_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0.00, verbose_name="To'langan summa")

    due_date = models.DateField(null=True, blank=True, verbose_name="Qaytarish muddati")
    status = models.CharField(max_length=10, choices=DEBT_STATUS_CHOICES, default='active', verbose_name="Holati")
    created_at = models.DateField(default=timezone.now, verbose_name="Yaratilgan sana")
    updated_at = models.DateField(auto_now=True, verbose_name="Yangilangan sana")
    notes = models.TextField(null=True, blank=True, verbose_name="Izoh")

    class Meta:
        verbose_name = "Qarz"
        verbose_name_plural = "Qarzlar"
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['status', 'currency']),
            models.Index(fields=['creditor', 'status']),
        ]

    def __str__(self):
        creditor_name = self.creditor.get_full_name() or self.creditor.username
        debtor_name = self.debtor_display_name
        return f"{creditor_name} → {debtor_name}: {self.remaining_amount}{self.currency_symbol}"

    @property
    def remaining_amount(self):
        """Qolgan qarz summasi"""
        return max(Decimal('0'), self.debt_amount - self.paid_amount)

    @property
    def debtor_display_name(self):
        """Qarz oluvchining nomi"""
        if self.customer:
            return self.customer.name
        elif self.debtor:
            return self.debtor.get_full_name() or self.debtor.username
        elif self.master:
            return f"Usta: {str(self.master)}"
        return "Noma'lum"

    @property
    def is_fully_paid(self):
        """Qarz to'liq to'langanmi?"""
        return self.remaining_amount <= 0

    @property
    def payment_percentage(self):
        """To'langan foiz"""
        if self.debt_amount == 0:
            return 0
        return min(100, (self.paid_amount / self.debt_amount) * 100)

    @property
    def currency_symbol(self):
        """Valyuta belgisi"""
        return '$' if self.currency == 'USD' else ' so\'m'

    def update_paid_amount(self):
        """To'lovlar yig'indisini yangilash"""
        total_payments = self.payments.aggregate(total=Sum('payment_amount'))['total'] or Decimal('0')

        if self.paid_amount != total_payments:
            self.paid_amount = total_payments
            self.status = 'paid' if self.is_fully_paid else 'active'
            self.save(update_fields=['paid_amount', 'status', 'updated_at'])

    def clean(self):
        """Validatsiya"""
        errors = {}

        # Valyuta limiti
        if self.currency == 'USD' and self.debt_amount > 500:
            errors['debt_amount'] = "Dollar qarz maksimal 500$!"
        elif self.currency == 'UZS' and self.debt_amount > 10000000:
            errors['debt_amount'] = "So'm qarz maksimal 10,000,000!"

        if self.debt_amount <= 0:
            errors['debt_amount'] = "Qarz summasi 0 dan katta bo'lishi kerak!"

        # Qarz oluvchi tekshiruvi (faqat saqlangandan keyin)
        if self.pk is not None:
            debt_recipients = [self.debtor, self.customer, self.master]
            active_recipients = [r for r in debt_recipients if r is not None]

            if len(active_recipients) == 0:
                errors['debtor'] = "Qarz oluvchi ko'rsatilishi shart!"
            elif len(active_recipients) > 1:
                errors['debtor'] = "Faqat bitta qarz oluvchi tanlanishi mumkin!"

            # Qarz turi va oluvchi mosligi
            if self.debt_type == 'customer_to_seller' and not self.customer:
                errors['customer'] = "Mijoz → Sotuvchi qarzi uchun mijoz kerak!"
            elif self.debt_type == 'seller_to_boss' and not self.debtor:
                errors['debtor'] = "Sotuvchi → Boshliq qarzi uchun sotuvchi kerak!"
            elif self.debt_type == 'boss_to_master' and not self.master:
                errors['master'] = "Boshliq → Usta qarzi uchun usta kerak!"

        if self.paid_amount > self.debt_amount:
            errors['paid_amount'] = "To'langan summa qarz summasidan ko'p bo'lmasligi kerak!"

        if errors:
            raise ValidationError(errors)

    def save(self, *args, **kwargs):
        """Saqlash - avtomatik status yangilash"""
        self.status = 'paid' if self.remaining_amount <= 0 else 'active'
        self.full_clean()
        super().save(*args, **kwargs)


class DebtPayment(models.Model):
    """Qarz to'lovlari"""
    debt = models.ForeignKey(Debt, on_delete=models.CASCADE, related_name="payments", verbose_name="Qarz")
    payment_amount = models.DecimalField(
        max_digits=12, decimal_places=2,
        validators=[MinValueValidator(0.01)],
        verbose_name="To'lov summasi"
    )
    payment_date = models.DateField(default=timezone.now, verbose_name="To'lov sanasi")
    received_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name="Qabul qilgan")
    notes = models.TextField(null=True, blank=True, verbose_name="Izoh")

    class Meta:
        verbose_name = "Qarz to'lovi"
        verbose_name_plural = "Qarz to'lovlari"
        ordering = ['-payment_date']

    def __str__(self):
        currency_symbol = '$' if self.debt.currency == 'USD' else " so'm"
        return f"{self.debt.debtor_display_name} - {self.payment_amount}{currency_symbol}"


# ============ SALES MODELS ============
class AccessorySale(models.Model):
    """Aksessuar sotish - So'mda"""
    accessory = models.ForeignKey(Accessory, on_delete=models.CASCADE, related_name="sales", verbose_name="Aksessuar")
    quantity = models.PositiveIntegerField(validators=[MinValueValidator(1)], verbose_name="Soni")
    unit_price = models.DecimalField(
        max_digits=12, decimal_places=2,
        validators=[MinValueValidator(0.01)],
        verbose_name="Birlik narxi (so'm)"
    )
    total_price = models.DecimalField(max_digits=12, decimal_places=2, editable=False,
                                      verbose_name="Umumiy narx (so'm)")

    cash_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                      verbose_name="Naqd (so'm)")
    card_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                      verbose_name="Karta (so'm)")
    credit_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                        verbose_name="Nasiya (so'm)")
    debt_amount = models.DecimalField(
        max_digits=12, decimal_places=2, default=0,
        validators=[MinValueValidator(0), MaxValueValidator(10000000)],
        verbose_name="Qarz (so'm)"
    )

    salesman = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="Sotuvchi")
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="accessory_sales",
                                 verbose_name="Mijoz")
    sale_date = models.DateField(default=timezone.now, verbose_name="Sotish sanasi")
    notes = models.TextField(null=True, blank=True, verbose_name="Izoh")

    class Meta:
        verbose_name = "Aksessuar sotish"
        verbose_name_plural = "Aksessuar sotuvlari"
        ordering = ['-sale_date']
        indexes = [models.Index(fields=['sale_date', 'salesman'])]

    def __str__(self):
        return f"{self.accessory.name} x {self.quantity} - {self.total_price:,.0f} so'm"

    @property
    def profit(self):
        """Foyda hisobi"""
        total_cost = self.accessory.purchase_price * self.quantity
        return self.total_price - total_cost

    def save(self, *args, **kwargs):
        """Saqlash"""
        self.total_price = self.unit_price * self.quantity
        if not kwargs.pop('skip_validation', False):
            self.full_clean()
        super().save(*args, **kwargs)


class PhoneSale(models.Model):
    """Telefon sotish - Dollarla"""
    # ✅ ForeignKey - bir telefonni bir necha marta sotish mumkin
    phone = models.ForeignKey(Phone, on_delete=models.CASCADE, related_name="phone_sales", verbose_name="Telefon")
    sale_price = models.DecimalField(
        max_digits=10, decimal_places=2,
        validators=[MinValueValidator(0.01)],
        verbose_name="Sotish narxi ($)"
    )

    cash_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                      verbose_name="Naqd ($)")
    card_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                      verbose_name="Karta ($)")
    credit_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                        verbose_name="Nasiya ($)")
    debt_amount = models.DecimalField(
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0), MaxValueValidator(500)],
        verbose_name="Qarz (max 500$)"
    )

    salesman = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="Sotuvchi")
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="phone_sales", verbose_name="Mijoz")
    sale_date = models.DateField(default=timezone.now, verbose_name="Sotish sanasi")
    notes = models.TextField(null=True, blank=True, verbose_name="Izoh")

    # ✅ Qaytarilgan yoki yo'qligini belgilash
    is_returned = models.BooleanField(default=False, verbose_name="Qaytarilganmi?")

    class Meta:
        verbose_name = "Telefon sotish"
        verbose_name_plural = "Telefon sotuvlari"
        ordering = ['-sale_date', '-id']
        indexes = [
            models.Index(fields=['sale_date', 'salesman']),
            models.Index(fields=['phone', 'is_returned']),
        ]

    def __str__(self):
        return f"{self.phone} - {self.customer.name} - ${self.sale_price}"

    def clean(self):
        """Validatsiya"""
        if not all([self.phone_id, self.salesman_id, self.customer_id]):
            raise ValidationError("Telefon, sotuvchi va mijoz tanlanishi shart!")

        if self.sale_price:
            total_payments = sum([
                self.cash_amount or 0,
                self.card_amount or 0,
                self.credit_amount or 0,
                self.debt_amount or 0
            ])
            if abs(total_payments - self.sale_price) > Decimal('0.01'):
                raise ValidationError("To'lovlar yig'indisi sotish narxiga teng bo'lishi kerak!")

        # ✅ Faqat do'kon va qaytarilgan telefonlarni sotish mumkin
        if not self.pk and self.phone_id:
            try:
                phone = Phone.objects.get(id=self.phone_id)
                if phone.status not in ['shop', 'returned']:
                    raise ValidationError(
                        f"Bu telefon {phone.get_status_display()} holatida! "
                        f"Faqat do'kondagi yoki qaytarilgan telefonlarni sotish mumkin."
                    )
            except Phone.DoesNotExist:
                raise ValidationError("Telefon topilmadi!")

    def save(self, *args, **kwargs):
        """Saqlash"""
        if not kwargs.pop('skip_validation', False):
            self.full_clean()

        if self.phone_id:
            Phone.objects.filter(id=self.phone_id).update(status='sold')

        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        """O'chirish - telefon statusini tiklash va qarzlarni o'chirish"""
        if self.phone_id:
            Phone.objects.filter(id=self.phone_id).update(status='shop')

        # Qarzlarni o'chirish
        if self.phone_id and self.customer_id:
            try:
                phone = Phone.objects.get(id=self.phone_id)
                Debt.objects.filter(
                    debt_type='customer_to_seller',
                    customer_id=self.customer_id,
                    currency='USD',
                    notes__icontains=phone.imei
                ).delete()

                if self.salesman_id:
                    Debt.objects.filter(
                        debt_type='seller_to_boss',
                        debtor_id=self.salesman_id,
                        currency='USD',
                        notes__icontains=phone.imei
                    ).delete()
            except Phone.DoesNotExist:
                pass

        super().delete(*args, **kwargs)


class PhoneReturn(models.Model):
    """Telefon qaytarish"""
    phone_sale = models.OneToOneField(PhoneSale, on_delete=models.CASCADE, related_name="phone_return",
                                      verbose_name="Telefon sotish")
    return_amount = models.DecimalField(
        max_digits=10, decimal_places=2,
        validators=[MinValueValidator(0)],
        verbose_name="Qaytarilgan summa ($)"
    )
    return_date = models.DateField(default=timezone.now, verbose_name="Qaytarish sanasi")
    reason = models.TextField(verbose_name="Qaytarish sababi")
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name="Yaratgan foydalanuvchi")
    notes = models.TextField(null=True, blank=True, verbose_name="Izoh")

    class Meta:
        verbose_name = "Telefon qaytarish"
        verbose_name_plural = "Telefon qaytarishlar"
        ordering = ['-return_date']

    def __str__(self):
        return f"{self.phone_sale.customer.name} - {self.phone_sale.phone} - ${self.return_amount}"

    @property
    def phone(self):
        return self.phone_sale.phone

    def clean(self):
        """Validatsiya"""
        if not self.phone_sale_id:
            raise ValidationError("Telefon sotish tanlanishi shart!")

        if self.pk is None and PhoneReturn.objects.filter(phone_sale_id=self.phone_sale_id).exists():
            raise ValidationError("Bu sotish allaqachon qaytarilgan!")

        if self.phone_sale_id and self.return_amount:
            try:
                phone_sale = PhoneSale.objects.get(id=self.phone_sale_id)
                if self.return_amount > phone_sale.sale_price:
                    raise ValidationError(
                        f"Qaytarish summasi sotish narxidan ko'p bo'lmasligi kerak! "
                        f"Sotish narxi: ${phone_sale.sale_price}"
                    )
            except PhoneSale.DoesNotExist:
                raise ValidationError("Telefon sotish topilmadi!")

        if not self.reason or not self.reason.strip():
            raise ValidationError("Qaytarish sababi kiritilishi kerak!")

    def save(self, *args, **kwargs):
        """Saqlash"""
        if not kwargs.pop('skip_validation', False):
            self.full_clean()

        # ✅ AVVAL PhoneReturn ni saqlash
        super().save(*args, **kwargs)

        # ✅ KEYIN PhoneSale va Phone statusini yangilash
        if self.phone_sale_id:
            # Direct update ishlatish
            from sales.models import PhoneSale
            PhoneSale.objects.filter(id=self.phone_sale_id).update(is_returned=True)

            # Phone statusini ham yangilash
            phone_sale = PhoneSale.objects.get(id=self.phone_sale_id)
            if phone_sale.phone_id:
                from inventory.models import Phone
                Phone.objects.filter(id=phone_sale.phone_id).update(status='returned')


class PhoneExchange(models.Model):
    """Telefon almashtirish"""
    EXCHANGE_TYPE_CHOICES = [
        ('customer_pays', 'Mijoz qo\'shimcha pul to\'laydi'),
        ('shop_pays', 'Do\'kon qo\'shimcha pul to\'laydi'),
        ('equal', 'Teng qiymatda almashtirish'),
    ]

    # Yangi telefon
    new_phone = models.ForeignKey(Phone, on_delete=models.CASCADE, related_name="exchanges_as_new",
                                  verbose_name="Yangi telefon")
    new_phone_price = models.DecimalField(
        max_digits=10, decimal_places=2,
        validators=[MinValueValidator(0.01)],
        verbose_name="Yangi telefon narxi ($)"
    )

    # Eski telefon ma'lumotlari
    old_phone_model = models.ForeignKey(PhoneModel, on_delete=models.CASCADE, verbose_name="Eski telefon modeli")
    old_phone_memory = models.ForeignKey(MemorySize, on_delete=models.CASCADE, verbose_name="Eski telefon xotirasi")
    old_phone_imei = models.CharField(
        max_length=20, blank=True, null=True,
        verbose_name="Eski telefon IMEI",
        validators=[RegexValidator(r'^\d{15}$', "IMEI 15 ta raqamdan iborat bo'lishi kerak")]
    )
    old_phone_condition_percentage = models.IntegerField(
        default=80,
        validators=[MinValueValidator(1), MaxValueValidator(100)],
        verbose_name="Eski telefon holati (%)"
    )
    old_phone_accepted_price = models.DecimalField(
        max_digits=10, decimal_places=2,
        validators=[MinValueValidator(0)],
        verbose_name="Eski telefon qabul narxi ($)"
    )
    old_phone_repair_cost = models.DecimalField(max_digits=10, decimal_places=2, default=0,
                                                verbose_name="Ta'mirlash xarajati ($)")
    old_phone_imei_cost = models.DecimalField(max_digits=10, decimal_places=2, default=0,
                                              verbose_name="IMEI xarajati ($)")
    old_phone_future_sale_price = models.DecimalField(max_digits=10, decimal_places=2, default=0,
                                                      verbose_name="Kelajakdagi sotish narxi ($)")
    old_phone_image = models.ImageField(upload_to='phones/exchanged/', blank=True, null=True,
                                        verbose_name="Eski telefon rasmi")

    # Almashtirish turi va to'lovlar
    exchange_type = models.CharField(max_length=20, choices=EXCHANGE_TYPE_CHOICES, verbose_name="Almashtirish turi")
    price_difference = models.DecimalField(max_digits=10, decimal_places=2, editable=False,
                                           verbose_name="Narx farqi ($)")

    cash_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                      verbose_name="Naqd ($)")
    card_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                      verbose_name="Karta ($)")
    credit_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)],
                                        verbose_name="Nasiya ($)")
    debt_amount = models.DecimalField(
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0), MaxValueValidator(500)],
        verbose_name="Qarz (max 500$)"
    )

    # Sotuvchi va mijoz
    salesman = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="Sotuvchi")
    customer_name = models.CharField(max_length=100, verbose_name="Mijoz ismi")
    customer_phone_number = models.CharField(max_length=15, verbose_name="Mijoz telefon raqami")
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="phone_exchanges",
                                 verbose_name="Mijoz", null=True, blank=True)

    # Sana va izohlar
    exchange_date = models.DateField(default=timezone.now, verbose_name="Almashtirish sanasi")
    notes = models.TextField(null=True, blank=True, verbose_name="Izoh")

    # Yaratilgan telefon
    created_old_phone = models.OneToOneField(Phone, on_delete=models.SET_NULL, null=True, blank=True,
                                             related_name="created_from_exchange",
                                             verbose_name="Yaratilgan eski telefon")
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                   related_name="created_phone_exchanges",
                                   verbose_name="Yaratgan foydalanuvchi")

    class Meta:
        verbose_name = "Telefon almashtirish"
        verbose_name_plural = "Telefon almashtirishlar"
        ordering = ['-exchange_date']
        indexes = [
            models.Index(fields=['exchange_date', 'salesman']),
            models.Index(fields=['customer', 'exchange_type']),
        ]

    def __str__(self):
        return f"{self.customer_name} — {self.old_phone_model} → {self.new_phone}"

    def __init__(self, *args, **kwargs):
        """Asl telefon ID ni saqlash"""
        super().__init__(*args, **kwargs)
        self._original_new_phone_id = self.new_phone_id if self.pk else None

    @property
    def old_phone_total_cost(self):
        """Eski telefonning umumiy tan narxi"""
        return self.old_phone_accepted_price + self.old_phone_repair_cost + self.old_phone_imei_cost

    @property
    def old_phone_profit(self):
        """Eski telefondan kutilgan foyda"""
        return self.old_phone_future_sale_price - self.old_phone_total_cost

    def calculate_price_difference(self):
        """Narx farqini hisoblash"""
        self.price_difference = self.new_phone_price - self.old_phone_accepted_price

    def clean(self):
        """Validatsiya"""
        self.calculate_price_difference()

        # IMEI dublikat tekshiruvi
        if self.old_phone_imei and self.old_phone_imei.strip():
            imei = self.old_phone_imei.strip()
            if len(imei) == 15 and imei.isdigit():
                existing_phones = Phone.objects.filter(imei=imei)
                if self.created_old_phone_id:
                    existing_phones = existing_phones.exclude(pk=self.created_old_phone_id)

                if existing_phones.exists():
                    raise ValidationError(
                        f"IMEI {imei} raqami bilan telefon allaqachon mavjud! "
                        f"Bu telefon: {existing_phones.first()}"
                    )

        # To'lovlar validatsiyasi
        if self.exchange_type == 'customer_pays':
            total_payments = sum([
                self.cash_amount or 0,
                self.card_amount or 0,
                self.credit_amount or 0,
                self.debt_amount or 0
            ])

            if self.price_difference > 0 and abs(total_payments - self.price_difference) > Decimal('0.01'):
                raise ValidationError(
                    f"To'lovlar yig'indisi narx farqiga teng bo'lishi kerak. "
                    f"Narx farqi: ${self.price_difference:.2f}, To'lovlar: ${total_payments:.2f}"
                )

        elif self.exchange_type in ['shop_pays', 'equal']:
            if any([self.cash_amount, self.card_amount, self.credit_amount, self.debt_amount]):
                raise ValidationError(
                    "Teng almashtirish yoki do'kon to'laydigan holatda to'lov summalari 0 bo'lishi kerak."
                )

        if not self.new_phone_id:
            raise ValidationError("Yangi telefon tanlanishi kerak!")

        if self.old_phone_accepted_price < 0:
            raise ValidationError("Qabul narxi manfiy bo'lishi mumkin emas!")

    def save(self, *args, **kwargs):
        """Saqlash"""
        is_new = not self.pk

        # Yangi telefonni "sotilgan" qilish
        if self.new_phone_id:
            should_update_status = (
                    is_new or
                    (hasattr(self, '_original_new_phone_id') and
                     self._original_new_phone_id and
                     self._original_new_phone_id != self.new_phone_id)
            )

            if should_update_status:
                Phone.objects.filter(id=self.new_phone_id).update(status='sold')

        super().save(*args, **kwargs)

        # Eski telefonni yaratish (faqat yangi yaratishda)
        if is_new and not self.created_old_phone_id:
            old_phone = Phone.objects.create(
                shop=self.new_phone.shop,
                phone_model=self.old_phone_model,
                memory_size=self.old_phone_memory,
                imei=self.old_phone_imei,
                condition_percentage=self.old_phone_condition_percentage,
                status='exchanged_in',
                purchase_price=self.old_phone_accepted_price,
                imei_cost=self.old_phone_imei_cost or 0,
                repair_cost=self.old_phone_repair_cost or 0,
                image=self.old_phone_image,
                created_at=timezone.now().date(),  # ✅ Shu satrni qo‘shing
                created_by=self.salesman,
                source_type='exchange',
                original_owner_name=self.customer_name,
                original_owner_phone=self.customer_phone_number,
            )

            # Recursion oldini olish
            PhoneExchange.objects.filter(pk=self.pk).update(created_old_phone=old_phone)
            self.created_old_phone = old_phone
