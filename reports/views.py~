# reports/views.py - TO'LIQ CASH FLOW INTEGRATSIYASI

from django.db.models import Sum, Count, Q
from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.contrib.auth.models import User
from django.core.paginator import Paginator
from datetime import datetime, timedelta, date
from decimal import Decimal
from calendar import monthrange

from sales.models import PhoneSale, PhoneExchange, PhoneReturn, AccessorySale
from shops.models import Shop
from .models import ReportCalculator, ProfitCalculator


class ReportMixin:
    """Hisobot view'lari uchun mixin"""

    @staticmethod
    def get_user_shops(user):
        """Foydalanuvchiga tegishli do'konlarni olish"""
        shops = Shop.objects.all()
        if hasattr(user, 'userprofile') and user.userprofile.role != 'boss':
            shops = shops.filter(owner=user)
        return shops

    @staticmethod
    def get_selected_shop(shops, shop_id):
        """Tanlangan do'konni olish"""
        if shop_id:
            return get_object_or_404(shops, id=shop_id)
        return shops.first()

    @staticmethod
    def parse_date(date_string, default=None):
        """Sana stringini datetime.date formatiga aylantirish"""
        if not date_string:
            return default or timezone.now().date()
        try:
            return datetime.strptime(date_string, '%Y-%m-%d').date()
        except (ValueError, TypeError):
            return default or timezone.now().date()


@login_required
def daily_report(request):
    """KUNLIK HISOBOT - Barcha sotuvchilar umumiy va alohida"""
    shops = ReportMixin.get_user_shops(request.user)
    if not shops.exists():
        return render(request, 'reports/no_shop.html')

    selected_shop = ReportMixin.get_selected_shop(shops, request.GET.get('shop'))
    selected_date = ReportMixin.parse_date(request.GET.get('date'))

    calculator = ReportCalculator(selected_shop)
    daily_data = calculator.get_daily_report(selected_date)
    profit_calc = ProfitCalculator()

    # Foyda hisoblash - umumiy ma'lumotlar uchun
    for sale in daily_data['sales_data']['phone_sales']:
        sale.calculated_profit = profit_calc.calculate_phone_profit(sale)
    for sale in daily_data['sales_data']['accessory_sales']:
        sale.calculated_profit = profit_calc.calculate_accessory_profit(sale)
    for exchange in daily_data['sales_data']['exchanges']:
        exchange.calculated_profit = profit_calc.calculate_exchange_profit(exchange)

    # SOTUVCHILAR RO'YXATI
    phone_sellers = list(PhoneSale.objects.filter(
        phone__shop=selected_shop,
        sale_date=selected_date
    ).values_list('salesman_id', flat=True).distinct())

    accessory_sellers = list(AccessorySale.objects.filter(
        accessory__shop=selected_shop,
        sale_date=selected_date
    ).values_list('salesman_id', flat=True).distinct())

    exchange_sellers = list(PhoneExchange.objects.filter(
        new_phone__shop=selected_shop,
        exchange_date=selected_date
    ).values_list('salesman_id', flat=True).distinct())

    seller_ids = set(phone_sellers) | set(accessory_sellers) | set(exchange_sellers)
    sellers = User.objects.filter(id__in=seller_ids).order_by('id')

    # HAR BIR SOTUVCHI UCHUN TAFSILOT
    seller_stats = []
    for seller in sellers:
        seller_calculator = ReportCalculator(selected_shop)
        seller_data = seller_calculator.get_seller_daily_report(seller, selected_date)

        # Foyda hisoblash
        for sale in seller_data['sales_data']['phone_sales']:
            sale.calculated_profit = profit_calc.calculate_phone_profit(sale)
        for sale in seller_data['sales_data']['accessory_sales']:
            sale.calculated_profit = profit_calc.calculate_accessory_profit(sale)
        for exchange in seller_data['sales_data']['exchanges']:
            exchange.calculated_profit = profit_calc.calculate_exchange_profit(exchange)

        if seller_data['counts']['total'] > 0:
            seller_stats.append(seller_data)

    # Telefon savdosi bo'yicha tartiblash
    seller_stats.sort(key=lambda x: x['sales']['phone_total_usd'], reverse=True)

    # UMUMIY STATISTIKA
    total_stats = {
        'total_phones_sold': daily_data['counts']['phone'],
        'total_accessories_sold': daily_data['counts']['accessory'],
        'total_exchanges': daily_data['counts']['exchange'],
        'total_returns': daily_data['counts'].get('returns', 0),
        'total_transactions': daily_data['counts']['total'],
        'total_sales_usd': daily_data['sales']['phone_total_usd'],
        'total_sales_uzs': daily_data['sales']['accessory_total_uzs'],
        'total_cash_usd': daily_data['sales']['phone_cash_usd'],
        'total_cash_uzs': daily_data['sales']['accessory_cash_uzs'],
        'total_card_usd': daily_data['sales']['phone_card_usd'],
        'total_card_uzs': daily_data['sales']['accessory_card_uzs'],
        'total_debt_usd': daily_data['sales']['phone_debt_usd'],
        'total_debt_uzs': daily_data['sales']['accessory_debt_uzs'],
        'total_credit_usd': daily_data['sales']['phone_credit_usd'],
        'total_credit_uzs': daily_data['sales']['accessory_credit_uzs'],
        'phone_profit': daily_data['profits'].get('phone_profit_usd', daily_data['profits'].get('phone_profit', 0)),
        'accessory_profit': daily_data['profits'].get('accessory_profit_uzs',
                                                      daily_data['profits'].get('accessory_profit', 0)),
        'exchange_profit': daily_data['profits'].get('exchange_profit_usd',
                                                     daily_data['profits'].get('exchange_profit', 0)),
        'total_phone_exchange_profit': daily_data['profits'].get('total_phone_exchange_profit', 0),
        'profit_margin': daily_data.get('profit_margin', 0),
    }

    return render(request, 'reports/daily_report.html', {
        'shops': shops,
        'selected_shop': selected_shop,
        'selected_date': selected_date,
        'daily_stats': daily_data,
        'seller_stats': seller_stats,
        'total_stats': total_stats,
        'today': timezone.now().date(),
    })


@login_required
def monthly_report(request):
    """OYLIK HISOBOT - Barcha sotuvchilar umumiy va alohida"""
    shops = ReportMixin.get_user_shops(request.user)
    if not shops.exists():
        return render(request, 'reports/no_shop.html')

    selected_shop = ReportMixin.get_selected_shop(shops, request.GET.get('shop'))
    year = int(request.GET.get('year', timezone.now().year))
    month = int(request.GET.get('month', timezone.now().month))

    calculator = ReportCalculator(selected_shop)
    monthly_data = calculator.get_monthly_report(year, month)

    start_date = date(year, month, 1)
    _, last_day = monthrange(year, month)
    end_date = date(year, month, last_day)

    # SOTUVCHILAR RO'YXATI
    phone_sellers = PhoneSale.objects.filter(
        phone__shop=selected_shop,
        sale_date__range=[start_date, end_date]
    ).values_list('salesman_id', flat=True).distinct()

    accessory_sellers = AccessorySale.objects.filter(
        accessory__shop=selected_shop,
        sale_date__range=[start_date, end_date]
    ).values_list('salesman_id', flat=True).distinct()

    exchange_sellers = PhoneExchange.objects.filter(
        new_phone__shop=selected_shop,
        exchange_date__range=[start_date, end_date]
    ).values_list('salesman_id', flat=True).distinct()

    seller_ids = set(phone_sellers) | set(accessory_sellers) | set(exchange_sellers)
    sellers = User.objects.filter(id__in=seller_ids)

    # HAR BIR SOTUVCHI UCHUN OYLIK MA'LUMOT
    seller_monthly_stats = []
    for seller in sellers:
        salary_data = calculator.get_seller_monthly_salary(seller, year, month)

        if salary_data['sales']['phone_count'] > 0 or salary_data['sales']['accessory_count'] > 0:
            total_phone_exchange_profit = salary_data['profits']['phone_profit'] + salary_data['profits'][
                'exchange_profit']

            seller_monthly_stats.append({
                'seller': seller,
                'phone_sales_usd': salary_data['sales']['phone_total'],
                'accessory_sales_uzs': salary_data['sales']['accessory_total'],
                'total_sales': salary_data['sales']['phone_total'] + salary_data['sales']['accessory_total'],
                'phone_profit': salary_data['profits']['phone_profit'],
                'accessory_profit': salary_data['profits']['accessory_profit'],
                'exchange_profit': salary_data['profits']['exchange_profit'],
                'total_phone_exchange_profit': total_phone_exchange_profit,
                'phone_count': salary_data['sales']['phone_count'],
                'accessory_count': salary_data['sales']['accessory_count'],
                'exchange_count': salary_data['sales']['exchange_count'],
                'returns_count': salary_data['sales']['returns_count'],
                'net_phones_sold': salary_data['sales']['phone_count'] + salary_data['sales']['exchange_count'],
                'commission': salary_data['commission'],
                'working_days': len(salary_data.get('daily_data', [])),
            })

    seller_monthly_stats.sort(key=lambda x: x['phone_sales_usd'], reverse=True)

    # UMUMIY STATISTIKA
    total_stats = {
        'total_phones_sold': monthly_data['counts']['phone'],
        'total_accessories_sold': monthly_data['counts']['accessory'],
        'total_exchanges': monthly_data['counts']['exchange'],
        'total_returns': monthly_data['counts']['returns'],
        'net_phones_sold': monthly_data['counts']['net_phone'],
        'total_transactions': monthly_data['counts']['total'],
        'total_sales': monthly_data['totals']['sales'],
        'phone_profit': monthly_data['profits']['phone_profit'],
        'accessory_profit': monthly_data['profits']['accessory_profit'],
        'exchange_profit': monthly_data['profits']['exchange_profit'],
        'total_phone_exchange_profit': monthly_data['profits']['total_phone_exchange_profit'],
        'profit_margin': monthly_data['profit_margin'],
        'working_days': monthly_data['period']['working_days'],
    }

    return render(request, 'reports/monthly_report.html', {
        'shops': shops,
        'selected_shop': selected_shop,
        'year': year,
        'month': month,
        'monthly_stats': monthly_data,
        'seller_monthly_stats': seller_monthly_stats,
        'total_stats': total_stats,
        'current_year': timezone.now().year,
        'current_month': timezone.now().month,
        'years': range(2020, timezone.now().year + 2),
        'months': range(1, 13),
        'month_names': {
            1: 'Yanvar', 2: 'Fevral', 3: 'Mart', 4: 'Aprel',
            5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avgust',
            9: 'Sentabr', 10: 'Oktabr', 11: 'Noyabr', 12: 'Dekabr'
        }
    })


@login_required
def yearly_report(request):
    """YILLIK HISOBOT - OYLIK HISOBOTLARDAN JAMLASH"""
    shops = ReportMixin.get_user_shops(request.user)
    if not shops.exists():
        return render(request, 'reports/no_shop.html')

    selected_shop = ReportMixin.get_selected_shop(shops, request.GET.get('shop'))
    year = int(request.GET.get('year', timezone.now().year))

    calculator = ReportCalculator(selected_shop)
    yearly_data = calculator.get_yearly_report(year)

    start_date = date(year, 1, 1)
    end_date = date(year, 12, 31)

    # SOTUVCHILAR RO'YXATI
    phone_sellers = PhoneSale.objects.filter(
        phone__shop=selected_shop,
        sale_date__range=[start_date, end_date]
    ).values_list('salesman_id', flat=True).distinct()

    accessory_sellers = AccessorySale.objects.filter(
        accessory__shop=selected_shop,
        sale_date__range=[start_date, end_date]
    ).values_list('salesman_id', flat=True).distinct()

    exchange_sellers = PhoneExchange.objects.filter(
        new_phone__shop=selected_shop,
        exchange_date__range=[start_date, end_date]
    ).values_list('salesman_id', flat=True).distinct()

    seller_ids = set(phone_sellers) | set(accessory_sellers) | set(exchange_sellers)
    sellers = User.objects.filter(id__in=seller_ids)

    # HAR BIR SOTUVCHI UCHUN YILLIK MA'LUMOT (OYLIK HISOBOTLARDAN)
    yearly_sellers_stats = []

    for seller in sellers:
        # OYLIK HISOBOTLARNI JAM QILISH
        total_phone_sales = Decimal('0')
        total_accessory_sales = Decimal('0')
        total_phone_profit = Decimal('0')
        total_accessory_profit = Decimal('0')
        total_exchange_profit = Decimal('0')
        total_phone_count = 0
        total_accessory_count = 0
        total_exchange_count = 0
        total_returns_count = 0

        for month in range(1, 13):
            monthly_salary = calculator.get_seller_monthly_salary(seller, year, month)

            total_phone_sales += monthly_salary['sales']['phone_total']
            total_accessory_sales += monthly_salary['sales']['accessory_total']
            total_phone_profit += monthly_salary['profits']['phone_profit']
            total_accessory_profit += monthly_salary['profits']['accessory_profit']
            total_exchange_profit += monthly_salary['profits']['exchange_profit']
            total_phone_count += monthly_salary['sales']['phone_count']
            total_accessory_count += monthly_salary['sales']['accessory_count']
            total_exchange_count += monthly_salary['sales']['exchange_count']
            total_returns_count += monthly_salary['sales']['returns_count']

        total_phone_exchange_profit = total_phone_profit + total_exchange_profit
        net_phone_count = total_phone_count + total_exchange_count

        if total_phone_count > 0 or total_accessory_count > 0 or total_exchange_count > 0:
            yearly_sellers_stats.append({
                'seller': seller,
                'phone_sales_usd': total_phone_sales,
                'accessory_sales_uzs': total_accessory_sales,
                'phone_count': total_phone_count,
                'accessory_count': total_accessory_count,
                'exchange_count': total_exchange_count,
                'returns_count': total_returns_count,
                'net_phone_count': net_phone_count,
                'phone_profit': total_phone_profit,
                'accessory_profit': total_accessory_profit,
                'exchange_profit': total_exchange_profit,
                'total_phone_exchange_profit': total_phone_exchange_profit,
                'total_sales': total_phone_sales + total_accessory_sales,
                'total_transactions': total_phone_count + total_accessory_count + total_exchange_count
            })

    yearly_sellers_stats.sort(
        key=lambda x: (x['phone_sales_usd'], x['total_transactions']),
        reverse=True
    )

    # UMUMIY STATISTIKA
    total_stats = {
        'total_phones_sold': yearly_data['counts']['phone'],
        'total_accessories_sold': yearly_data['counts']['accessory'],
        'total_exchanges': yearly_data['counts']['exchange'],
        'total_returns': yearly_data['counts']['returns'],
        'net_phones_sold': yearly_data['counts']['net_phone'],
        'total_transactions': yearly_data['counts']['total'],
        'total_sales': yearly_data['totals']['sales'],
        'phone_profit': yearly_data['profits']['phone_profit'],
        'accessory_profit': yearly_data['profits']['accessory_profit'],
        'exchange_profit': yearly_data['profits']['exchange_profit'],
        'total_phone_exchange_profit': yearly_data['profits']['total_phone_exchange_profit'],
        'profit_margin': yearly_data['profits']['profit_margin'],
    }

    return render(request, 'reports/yearly_report.html', {
        'shops': shops,
        'selected_shop': selected_shop,
        'year': year,
        'yearly_stats': yearly_data,
        'yearly_sellers_stats': yearly_sellers_stats,
        'total_stats': total_stats,
        'current_year': timezone.now().year,
        'years': range(2020, timezone.now().year + 2),
        'month_names': {
            1: 'Yanvar', 2: 'Fevral', 3: 'Mart', 4: 'Aprel',
            5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avgust',
            9: 'Sentabr', 10: 'Oktabr', 11: 'Noyabr', 12: 'Dekabr'
        }
    })


@login_required
def seller_detail_page(request, seller_id):
    """SOTUVCHI KUNLIK TAFSILOT SAHIFASI"""
    seller = get_object_or_404(User, id=seller_id)
    shops = ReportMixin.get_user_shops(request.user)

    if not shops.exists():
        return render(request, 'reports/no_shop.html')

    selected_shop = ReportMixin.get_selected_shop(shops, request.GET.get('shop'))
    selected_date = ReportMixin.parse_date(request.GET.get('date'))

    calculator = ReportCalculator(selected_shop)
    seller_stats = calculator.get_seller_daily_report(seller, selected_date)
    profit_calc = ProfitCalculator()

    # Foyda hisoblash
    for sale in seller_stats['sales_data']['phone_sales']:
        sale.calculated_profit = profit_calc.calculate_phone_profit(sale)
    for exchange in seller_stats['sales_data']['exchanges']:
        exchange.calculated_profit = profit_calc.calculate_exchange_profit(exchange)
    for sale in seller_stats['sales_data']['accessory_sales']:
        sale.calculated_profit = profit_calc.calculate_accessory_profit(sale)
    for return_obj in seller_stats['sales_data']['phone_returns']:
        return_obj.lost_profit = (
            return_obj.phone_sale.sale_price - return_obj.phone_sale.phone.cost_price
        )

    # Pagination
    phone_page = request.GET.get('phone_page', 1)
    phone_paginator = Paginator(seller_stats['sales_data']['phone_sales'], 10)
    phone_sales_page = phone_paginator.get_page(phone_page)

    accessory_page = request.GET.get('accessory_page', 1)
    accessory_paginator = Paginator(seller_stats['sales_data']['accessory_sales'], 10)
    accessory_sales_page = accessory_paginator.get_page(accessory_page)

    exchange_page = request.GET.get('exchange_page', 1)
    exchange_paginator = Paginator(seller_stats['sales_data']['exchanges'], 10)
    exchanges_page = exchange_paginator.get_page(exchange_page)

    month_names = {
        1: 'Yanvar', 2: 'Fevral', 3: 'Mart', 4: 'Aprel',
        5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avgust',
        9: 'Sentabr', 10: 'Oktabr', 11: 'Noyabr', 12: 'Dekabr'
    }

    return render(request, 'reports/seller_detail.html', {
        'seller': seller,
        'shops': shops,
        'selected_shop': selected_shop,
        'selected_date': selected_date,
        'month': selected_date.month,
        'year': selected_date.year,
        'month_name': month_names.get(selected_date.month),
        'seller_stats': seller_stats,
        'phone_sales_page': phone_sales_page,
        'accessory_sales_page': accessory_sales_page,
        'exchanges_page': exchanges_page,
        'today': timezone.now().date(),
    })


@login_required
def seller_detail_modal(request, seller_id):
    """Sotuvchi modal tafsiloti"""
    seller = get_object_or_404(User, id=seller_id)
    shop_id = request.GET.get('shop')
    selected_date = ReportMixin.parse_date(request.GET.get('date'))

    if not shop_id:
        return JsonResponse({'error': "Do'kon ID kerak"}, status=400)

    try:
        shop = Shop.objects.get(id=shop_id)
    except Shop.DoesNotExist:
        return JsonResponse({'error': "Do'kon topilmadi"}, status=404)

    calculator = ReportCalculator(shop)
    seller_stats = calculator.get_seller_daily_report(seller, selected_date)
    profit_calc = ProfitCalculator()

    for sale in seller_stats['sales_data']['phone_sales']:
        sale.calculated_profit = profit_calc.calculate_phone_profit(sale)
    for sale in seller_stats['sales_data']['accessory_sales']:
        sale.calculated_profit = profit_calc.calculate_accessory_profit(sale)
    for exchange in seller_stats['sales_data']['exchanges']:
        exchange.calculated_profit = profit_calc.calculate_exchange_profit(exchange)

    return render(request, 'reports/seller_detail_modal.html', {
        'seller': seller,
        'seller_stats': seller_stats,
        'selected_date': selected_date,
        'shop_id': shop_id,
    })


@login_required
def seller_salary_report(request, seller_id):
    """SOTUVCHI OYLIK MAOSH HISOBOTI"""
    seller = get_object_or_404(User, id=seller_id)
    shops = ReportMixin.get_user_shops(request.user)

    if not shops.exists():
        return render(request, 'reports/no_shop.html')

    selected_shop = ReportMixin.get_selected_shop(shops, request.GET.get('shop'))
    year = int(request.GET.get('year', timezone.now().year))
    month = int(request.GET.get('month', timezone.now().month))

    calculator = ReportCalculator(selected_shop)
    salary_data = calculator.get_seller_monthly_salary(seller, year, month)
    profit_calc = ProfitCalculator()

    # Har bir kunlik ma'lumotga foyda qo'shish
    for day_data in salary_data.get('daily_data', []):
        for sale in day_data['sales_data']['phone_sales']:
            sale.calculated_profit = profit_calc.calculate_phone_profit(sale)
        for exchange in day_data['sales_data']['exchanges']:
            exchange.calculated_profit = profit_calc.calculate_exchange_profit(exchange)
        for sale in day_data['sales_data']['accessory_sales']:
            sale.calculated_profit = profit_calc.calculate_accessory_profit(sale)

    return render(request, 'reports/seller_salary.html', {
        'seller': seller,
        'shops': shops,
        'selected_shop': selected_shop,
        'year': year,
        'month': month,
        'salary_data': salary_data,
        'daily_data': salary_data.get('daily_data', []),
        'years': range(2020, timezone.now().year + 2),
        'months': range(1, 13),
        'month_names': {
            1: 'Yanvar', 2: 'Fevral', 3: 'Mart', 4: 'Aprel',
            5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avgust',
            9: 'Sentabr', 10: 'Oktabr', 11: 'Noyabr', 12: 'Dekabr'
        }
    })

@login_required
def phone_sales_api(request):
    """Telefon sotuvlari API"""
    shop_id = request.GET.get('shop')
    date_str = request.GET.get('date')
    page = int(request.GET.get('page', 1))

    if not shop_id or not date_str:
        return JsonResponse({'error': "Do'kon va sana parametrlari kerak"}, status=400)

    try:
        selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        shop = Shop.objects.get(id=shop_id)
    except (ValueError, Shop.DoesNotExist):
        return JsonResponse({'error': "Noto'g'ri parametrlar"}, status=400)

    phone_sales = PhoneSale.objects.filter(
        phone__shop=shop,
        sale_date=selected_date
    ).select_related('phone', 'customer', 'salesman').order_by('-id')

    paginator = Paginator(phone_sales, 20)
    page_obj = paginator.get_page(page)

    profit_calc = ProfitCalculator()
    results = []
    for sale in page_obj:
        results.append({
            'phone_model': f"{sale.phone.phone_model} {sale.phone.memory_size}",
            'customer_name': sale.customer.name,
            'salesman_name': sale.salesman.get_full_name() or sale.salesman.username,
            'sale_price_usd': float(sale.sale_price),
            'cash_amount_usd': float(sale.cash_amount),
            'card_amount_usd': float(sale.card_amount),
            'debt_amount_usd': float(sale.debt_amount),
            'credit_amount_usd': float(sale.credit_amount),
            'profit_usd': float(profit_calc.calculate_phone_profit(sale)),
            'sale_time': sale.created_at.strftime('%H:%M') if hasattr(sale, 'created_at') else sale.sale_date.strftime('%H:%M'),
            'currency': 'USD'
        })

    return JsonResponse({
        'results': results,
        'count': paginator.count,
        'has_next': page_obj.has_next(),
        'has_previous': page_obj.has_previous()
    })


@login_required
def accessory_sales_api(request):
    """Aksessuar sotuvlari API"""
    shop_id = request.GET.get('shop')
    date_str = request.GET.get('date')
    page = int(request.GET.get('page', 1))

    if not shop_id or not date_str:
        return JsonResponse({'error': "Do'kon va sana parametrlari kerak"}, status=400)

    try:
        selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        shop = Shop.objects.get(id=shop_id)
    except (ValueError, Shop.DoesNotExist):
        return JsonResponse({'error': "Noto'g'ri parametrlar"}, status=400)

    accessory_sales = AccessorySale.objects.filter(
        accessory__shop=shop,
        sale_date=selected_date
    ).select_related('accessory', 'customer', 'salesman').order_by('-id')

    paginator = Paginator(accessory_sales, 20)
    page_obj = paginator.get_page(page)

    profit_calc = ProfitCalculator()
    results = []
    for sale in page_obj:
        results.append({
            'accessory_name': sale.accessory.name,
            'quantity': sale.quantity,
            'customer_name': sale.customer.name,
            'salesman_name': sale.salesman.get_full_name() or sale.salesman.username,
            'total_price_uzs': int(sale.total_price),
            'unit_price_uzs': int(sale.unit_price),
            'cash_amount_uzs': int(sale.cash_amount),
            'card_amount_uzs': int(sale.card_amount),
            'debt_amount_uzs': int(sale.debt_amount),
            'profit_uzs': int(profit_calc.calculate_accessory_profit(sale)),
            'sale_time': sale.created_at.strftime('%H:%M') if hasattr(sale, 'created_at') else sale.sale_date.strftime('%H:%M'),
            'currency': 'UZS'
        })

    return JsonResponse({
        'results': results,
        'count': paginator.count,
        'has_next': page_obj.has_next(),
        'has_previous': page_obj.has_previous()
    })


@login_required
def exchange_sales_api(request):
    """Almashtirish sotuvlari API"""
    shop_id = request.GET.get('shop')
    date_str = request.GET.get('date')
    page = int(request.GET.get('page', 1))

    if not shop_id or not date_str:
        return JsonResponse({'error': "Do'kon va sana parametrlari kerak"}, status=400)

    try:
        selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        shop = Shop.objects.get(id=shop_id)
    except (ValueError, Shop.DoesNotExist):
        return JsonResponse({'error': "Noto'g'ri parametrlar"}, status=400)

    exchanges = PhoneExchange.objects.filter(
        new_phone__shop=shop,
        exchange_date=selected_date
    ).select_related('new_phone', 'salesman').order_by('-id')

    paginator = Paginator(exchanges, 20)
    page_obj = paginator.get_page(page)

    profit_calc = ProfitCalculator()
    results = []
    for exchange in page_obj:
        results.append({
            'old_phone_model': f"{exchange.old_phone_model}",
            'new_phone_model': f"{exchange.new_phone.phone_model} {exchange.new_phone.memory_size}",
            'customer_name': exchange.customer_name,
            'salesman_name': exchange.salesman.get_full_name() or exchange.salesman.username,
            'new_phone_price_usd': float(exchange.new_phone_price),
            'old_phone_value_usd': float(exchange.old_phone_accepted_price),
            'additional_payment_usd': float(exchange.cash_amount),
            'profit_usd': float(profit_calc.calculate_exchange_profit(exchange)),
            'exchange_time': exchange.created_at.strftime('%H:%M') if hasattr(exchange, 'created_at') else exchange.exchange_date.strftime('%H:%M'),
            'currency': 'USD'
        })

    return JsonResponse({
        'results': results,
        'count': paginator.count,
        'has_next': page_obj.has_next(),
        'has_previous': page_obj.has_previous()
    })

@login_required
def comparison_report(request):
    """Taqqoslash hisoboti"""
    shops = ReportMixin.get_user_shops(request.user)
    if not shops.exists():
        return render(request, 'reports/no_shop.html')

    selected_shop = ReportMixin.get_selected_shop(shops, request.GET.get('shop'))
    calculator = ReportCalculator(selected_shop)

    today = timezone.now().date()
    yesterday = today - timedelta(days=1)

    today_stats = calculator.get_daily_report(today)
    yesterday_stats = calculator.get_daily_report(yesterday)

    def calc_change(current, previous):
        if previous == 0:
            return Decimal('0.00')
        return ((current - previous) / previous * 100).quantize(Decimal('0.01'))

    daily_comparison = {
        'today': today_stats,
        'yesterday': yesterday_stats,
        'phone_sales_change': calc_change(
            today_stats['sales']['phone_total_usd'],
            yesterday_stats['sales']['phone_total_usd']
        ),
        'accessory_sales_change': calc_change(
            today_stats['sales']['accessory_total_uzs'],
            yesterday_stats['sales']['accessory_total_uzs']
        ),
        'phone_cash_change': calc_change(
            today_stats['sales']['phone_cash_usd'],
            yesterday_stats['sales']['phone_cash_usd']
        ),
        'accessory_cash_change': calc_change(
            today_stats['sales']['accessory_cash_uzs'],
            yesterday_stats['sales']['accessory_cash_uzs']
        ),
        'profit_change': calc_change(
            today_stats['profits']['total_profit'],
            yesterday_stats['profits']['total_profit']
        )
    }

    current_month = today.month
    current_year = today.year

    if current_month == 1:
        previous_month = 12
        previous_year = current_year - 1
    else:
        previous_month = current_month - 1
        previous_year = current_year

    current_monthly = calculator.get_monthly_report(current_year, current_month)
    previous_monthly = calculator.get_monthly_report(previous_year, previous_month)

    monthly_comparison = {
        'current': current_monthly,
        'previous': previous_monthly,
        'sales_change': calc_change(
            current_monthly['totals']['sales'],
            previous_monthly['totals']['sales']
        ),
        'profit_change': calc_change(
            current_monthly['profits']['total_profit'],
            previous_monthly['profits']['total_profit']
        )
    }

    return render(request, 'reports/comparison_report.html', {
        'shops': shops,
        'selected_shop': selected_shop,
        'daily_comparison': daily_comparison,
        'monthly_comparison': monthly_comparison
    })


@login_required
def yearly_profit_detail(request):
    """Yillik foyda tafsiloti API"""
    shop_id = request.GET.get('shop')
    year = int(request.GET.get('year', timezone.now().year))

    if not shop_id:
        return JsonResponse({'error': "Do'kon ID kerak"}, status=400)

    try:
        shop = Shop.objects.get(id=shop_id)
    except Shop.DoesNotExist:
        return JsonResponse({'error': "Do'kon topilmadi"}, status=404)

    calculator = ReportCalculator(shop)
    yearly_data = calculator.get_yearly_report(year)

    return JsonResponse({
        'success': True,
        'period': f"{year}",
        'profits': {
            'phone_profit': float(yearly_data.get('profits', {}).get('phone_profit', 0)),
            'accessory_profit': float(yearly_data.get('profits', {}).get('accessory_profit', 0)),
            'exchange_profit': float(yearly_data.get('profits', {}).get('exchange_profit', 0)),
            'total_profit': float(yearly_data.get('profits', {}).get('total_profit', 0))
        },
        'totals': {
            'phone_sales': float(yearly_data.get('totals', {}).get('phone_sales', 0)),
            'accessory_sales': float(yearly_data.get('totals', {}).get('accessory_sales', 0)),
            'total_sales': float(yearly_data.get('totals', {}).get('sales', 0))
        },
        'counts': {
            'phone': yearly_data.get('counts', {}).get('phone', 0),
            'accessory': yearly_data.get('counts', {}).get('accessory', 0),
            'exchange': yearly_data.get('counts', {}).get('exchange', 0),
            'total': yearly_data.get('counts', {}).get('total', 0)
        },
        'profit_margin': float(yearly_data.get('profits', {}).get('profit_margin', 0))
    })


@login_required
def cashflow_api(request):
    """Cash Flow API - kunlik"""
    shop_id = request.GET.get('shop')
    date_str = request.GET.get('date')

    if not shop_id or not date_str:
        return JsonResponse({'error': "Parametrlar kerak"}, status=400)

    try:
        selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        shop = Shop.objects.get(id=shop_id)
    except (ValueError, Shop.DoesNotExist):
        return JsonResponse({'error': "Noto'g'ri parametrlar"}, status=400)

    calculator = ReportCalculator(shop)
    daily_data = calculator.get_daily_report(selected_date)
    cashflow = daily_data.get('cashflow', {})

    return JsonResponse({
        'success': True,
        'date': str(selected_date),
        'cashflow': {
            'usd': {
                'income': float(cashflow.get('usd', {}).get('income', 0)),
                'expense': float(cashflow.get('usd', {}).get('expense', 0)),
                'net': float(cashflow.get('usd', {}).get('net', 0))
            },
            'uzs': {
                'income': float(cashflow.get('uzs', {}).get('income', 0)),
                'expense': float(cashflow.get('uzs', {}).get('expense', 0)),
                'net': float(cashflow.get('uzs', {}).get('net', 0))
            },
            'details': {
                'phone_sales': float(cashflow.get('details', {}).get('phone_sales', 0)),
                'accessory_sales': float(cashflow.get('details', {}).get('accessory_sales', 0)),
                'exchange_income': float(cashflow.get('details', {}).get('exchange_income', 0)),
                'exchange_equal': int(cashflow.get('details', {}).get('exchange_equal', 0)),
                'daily_seller_payments': float(cashflow.get('details', {}).get('daily_seller_payments', 0)),
                'exchange_expenses': float(cashflow.get('details', {}).get('exchange_expenses', 0)),
                'phone_returns': float(cashflow.get('details', {}).get('phone_returns', 0)),
                'daily_expenses': float(cashflow.get('details', {}).get('daily_expenses', 0)),
            }
        }
    })


@login_required
def cashflow_details_api(request):
    """Cash Flow tafsilotlari"""
    from .models import CashFlowTransaction

    shop_id = request.GET.get('shop')
    date_str = request.GET.get('date')

    if not shop_id or not date_str:
        return JsonResponse({'error': "Parametrlar kerak"}, status=400)

    try:
        selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        shop = Shop.objects.get(id=shop_id)
    except (ValueError, Shop.DoesNotExist):
        return JsonResponse({'error': "Noto'g'ri parametrlar"}, status=400)

    transactions = CashFlowTransaction.objects.filter(
        shop=shop,
        transaction_date=selected_date
    ).order_by('-created_at')

    results = []
    for trans in transactions:
        results.append({
            'id': trans.id,
            'type': trans.get_transaction_type_display(),
            'amount_usd': float(trans.amount_usd),
            'amount_uzs': float(trans.amount_uzs),
            'description': trans.description,
            'notes': trans.notes,
            'created_at': trans.created_at.strftime('%H:%M:%S')
        })

    return JsonResponse({
        'success': True,
        'count': len(results),
        'transactions': results
    })