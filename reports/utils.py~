# reports/utils.py - TO'LIQ YANGILANGAN

from decimal import Decimal
from django.utils import timezone
from datetime import date, timedelta
from calendar import monthrange
from decimal import InvalidOperation

class DateHelper:
    """Sana bilan ishlash"""

    @staticmethod
    def get_month_range(year, month):
        """Oy boshlanishi va oxirini olish"""
        start_date = date(year, month, 1)
        _, last_day = monthrange(year, month)
        end_date = date(year, month, last_day)
        return start_date, end_date

    @staticmethod
    def get_year_range(year):
        """Yil boshlanishi va oxirini olish"""
        return date(year, 1, 1), date(year, 12, 31)

    @staticmethod
    def get_week_range(target_date):
        """Hafta boshlanishi va oxirini olish"""
        start = target_date - timedelta(days=target_date.weekday())
        end = start + timedelta(days=6)
        return start, end

    @staticmethod
    def get_quarter_range(year, quarter):
        """Chorak boshlanishi va oxirini olish"""
        quarter_months = {
            1: (1, 3),
            2: (4, 6),
            3: (7, 9),
            4: (10, 12)
        }
        start_month, end_month = quarter_months.get(quarter, (1, 3))
        start_date = date(year, start_month, 1)
        _, last_day = monthrange(year, end_month)
        end_date = date(year, end_month, last_day)
        return start_date, end_date

    @staticmethod
    def parse_date_string(date_str, default=None):
        """String sanani date formatga o'girish"""
        if not date_str:
            return default or timezone.now().date()

        from datetime import datetime
        try:
            if isinstance(date_str, str):
                return datetime.strptime(date_str, '%Y-%m-%d').date()
            elif isinstance(date_str, datetime):
                return date_str.date()
            elif isinstance(date_str, date):
                return date_str
        except (ValueError, TypeError):
            return default or timezone.now().date()

        return default or timezone.now().date()


class NumberFormatter:
    """Raqamlarni formatlash"""

    @staticmethod
    def format_currency(amount, currency='UZS'):
        """Pul miqdorini formatlash"""
        try:
            amount = Decimal(str(amount)) if amount else Decimal('0')
            if currency == 'USD':
                return f"${amount:,.2f}"
            else:
                return f"{amount:,.0f} so'm"
        except (ValueError, TypeError, InvalidOperation):
            return f"0 {currency}"

    @staticmethod
    def format_percentage(value, decimal_places=2):
        """Foizni formatlash"""
        try:
            value = Decimal(str(value)) if value else Decimal('0')
            return f"{value:.{decimal_places}f}%"
        except (ValueError, TypeError, InvalidOperation):
            return "0.00%"

    @staticmethod
    def calculate_percentage_change(current, previous):
        """Foiz o'zgarishini hisoblash"""
        try:
            current = Decimal(str(current)) if current else Decimal('0')
            previous = Decimal(str(previous)) if previous else Decimal('0')

            if previous == 0:
                return Decimal('0.00')

            change = ((current - previous) / previous) * 100
            return Decimal(str(change)).quantize(Decimal('0.01'))
        except (ValueError, TypeError, InvalidOperation, ZeroDivisionError):
            return Decimal('0.00')

    @staticmethod
    def format_number(number, decimal_places=0):
        """Raqamni formatlash"""
        try:
            number = Decimal(str(number)) if number else Decimal('0')
            if decimal_places > 0:
                return f"{number:,.{decimal_places}f}"
            else:
                return f"{number:,.0f}"
        except (ValueError, TypeError, InvalidOperation):
            return "0"

    @staticmethod
    def abbreviate_number(number):
        """Raqamni qisqartirish (1000 -> 1K)"""
        try:
            number = float(number) if number else 0
            if number >= 1_000_000_000:
                return f"{number / 1_000_000_000:.1f}B"
            elif number >= 1_000_000:
                return f"{number / 1_000_000:.1f}M"
            elif number >= 1_000:
                return f"{number / 1_000:.1f}K"
            else:
                return f"{number:.0f}"
        except (ValueError, TypeError):
            return "0"


class CashFlowHelper:
    """Cash Flow helper"""

    @staticmethod
    def format_transaction_type(transaction_type):
        """Tranzaksiya turini formatlash"""
        types = {
            'phone_sale': 'Telefon sotildi',
            'accessory_sale': 'Aksessuar sotildi',
            'exchange_income': 'Almashtirish - mijoz pul berdi',
            'exchange_expense': 'Almashtirish - do\'kon pul berdi',
            'exchange_equal': 'Teng almashtirish',
            'exchange_old_phone_value': 'Almashtirish - olingan telefon qiymati',
            'daily_seller_payment': 'Kunlik sotuvchiga to\'lov',
            'phone_return': 'Telefon qaytarish',
            'daily_expense': 'Kunlik harajat',
        }
        return types.get(transaction_type, transaction_type)

    @staticmethod
    def get_transaction_category(transaction_type):
        """Tranzaksiya kategoriyasi"""
        income_types = ['phone_sale', 'accessory_sale', 'exchange_income']
        expense_types = ['daily_seller_payment', 'exchange_expense', 'phone_return', 'daily_expense',
                         'exchange_old_phone_value']
        neutral_types = ['exchange_equal']

        if transaction_type in income_types:
            return 'income'
        elif transaction_type in expense_types:
            return 'expense'
        elif transaction_type in neutral_types:
            return 'neutral'
        else:
            return 'unknown'

    @staticmethod
    def get_transaction_icon(transaction_type):
        """Tranzaksiya belgisi"""
        category = CashFlowHelper.get_transaction_category(transaction_type)
        if category == 'income':
            return '+'
        elif category == 'expense':
            return '-'
        else:
            return '='

    @staticmethod
    def get_transaction_color_class(transaction_type):
        """Tranzaksiya rang klassi (Bootstrap)"""
        colors = {
            'phone_sale': 'success',
            'accessory_sale': 'success',
            'exchange_income': 'success',
            'exchange_expense': 'danger',
            'exchange_equal': 'info',
            'exchange_old_phone_value': 'warning',
            'daily_seller_payment': 'danger',
            'phone_return': 'warning',
            'daily_expense': 'danger',
        }
        return colors.get(transaction_type, 'secondary')

    @staticmethod
    def calculate_net_cashflow(transactions):
        """Net cashflow hisoblash"""
        usd_income = Decimal('0')
        usd_expense = Decimal('0')
        uzs_income = Decimal('0')
        uzs_expense = Decimal('0')

        for trans in transactions:
            if trans.amount_usd > 0:
                usd_income += trans.amount_usd
            elif trans.amount_usd < 0:
                usd_expense += abs(trans.amount_usd)

            if trans.amount_uzs > 0:
                uzs_income += trans.amount_uzs
            elif trans.amount_uzs < 0:
                uzs_expense += abs(trans.amount_uzs)

        return {
            'usd': {
                'income': usd_income,
                'expense': usd_expense,
                'net': usd_income - usd_expense
            },
            'uzs': {
                'income': uzs_income,
                'expense': uzs_expense,
                'net': uzs_income - uzs_expense
            }
        }


class TemplateHelpers:
    """Template uchun helper funksiyalar"""

    @staticmethod
    def get_month_name(month_number):
        """Oy nomini olish"""
        months = {
            1: 'Yanvar', 2: 'Fevral', 3: 'Mart', 4: 'Aprel',
            5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avgust',
            9: 'Sentabr', 10: 'Oktabr', 11: 'Noyabr', 12: 'Dekabr'
        }
        return months.get(month_number, '')

    @staticmethod
    def get_month_short_name(month_number):
        """Qisqa oy nomini olish"""
        months = {
            1: 'Yan', 2: 'Fev', 3: 'Mar', 4: 'Apr',
            5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avg',
            9: 'Sen', 10: 'Okt', 11: 'Noy', 12: 'Dek'
        }
        return months.get(month_number, '')

    @staticmethod
    def get_status_class(value, comparison_value=None, reverse=False):
        """Status rang klassi"""
        try:
            value = Decimal(str(value)) if value else Decimal('0')
            comparison_value = Decimal(str(comparison_value)) if comparison_value else None

            if comparison_value is None:
                return 'primary'

            if not reverse:
                if value > comparison_value:
                    return 'success'
                elif value < comparison_value:
                    return 'danger'
                else:
                    return 'secondary'
            else:
                if value > comparison_value:
                    return 'danger'
                elif value < comparison_value:
                    return 'success'
                else:
                    return 'secondary'
        except (ValueError, TypeError):
            return 'secondary'

    @staticmethod
    def get_trend_icon(current, previous):
        """Trend belgisi"""
        try:
            current = Decimal(str(current)) if current else Decimal('0')
            previous = Decimal(str(previous)) if previous else Decimal('0')

            if current > previous:
                return '▲'  # Yuqoriga
            elif current < previous:
                return '▼'  # Pastga
            else:
                return '='  # Teng
        except (ValueError, TypeError):
            return '='

    @staticmethod
    def get_badge_class(status):
        """Badge rang klassi"""
        badges = {
            'active': 'success',
            'pending': 'warning',
            'completed': 'info',
            'cancelled': 'danger',
            'approved': 'success',
            'rejected': 'danger',
        }
        return badges.get(status.lower(), 'secondary')


class ExportHelper:
    """Export uchun helper"""

    @staticmethod
    def prepare_daily_report_for_export(report_data):
        """Kunlik hisobotni export uchun tayyorlash"""
        return {
            'report_type': 'daily',
            'generated_at': timezone.now().isoformat(),
            'shop': str(report_data.get('shop', '')),
            'date': str(report_data.get('date', '')),
            'sales': {
                'phone_total_usd': float(report_data.get('sales', {}).get('phone_total_usd', 0)),
                'accessory_total_uzs': float(report_data.get('sales', {}).get('accessory_total_uzs', 0)),
                'total_sales': float(report_data.get('sales', {}).get('total', 0)),
                'total_cash': float(report_data.get('sales', {}).get('cash', 0)),
                'total_card': float(report_data.get('sales', {}).get('card', 0)),
                'total_debt': float(report_data.get('sales', {}).get('debt', 0)),
            },
            'profits': {
                'phone_profit': float(report_data.get('profits', {}).get('phone_profit_usd', 0)),
                'accessory_profit': float(report_data.get('profits', {}).get('accessory_profit_uzs', 0)),
                'exchange_profit': float(report_data.get('profits', {}).get('exchange_profit_usd', 0)),
                'total_profit': float(report_data.get('profits', {}).get('total_profit', 0)),
            },
            'counts': {
                'phone_sales': report_data.get('counts', {}).get('phone', 0),
                'accessory_sales': report_data.get('counts', {}).get('accessory', 0),
                'exchanges': report_data.get('counts', {}).get('exchange', 0),
                'total_transactions': report_data.get('counts', {}).get('total', 0),
            },
            'cashflow': {
                'usd_income': float(report_data.get('cashflow', {}).get('usd', {}).get('income', 0)),
                'usd_expense': float(report_data.get('cashflow', {}).get('usd', {}).get('expense', 0)),
                'usd_net': float(report_data.get('cashflow', {}).get('usd', {}).get('net', 0)),
                'uzs_income': float(report_data.get('cashflow', {}).get('uzs', {}).get('income', 0)),
                'uzs_expense': float(report_data.get('cashflow', {}).get('uzs', {}).get('expense', 0)),
                'uzs_net': float(report_data.get('cashflow', {}).get('uzs', {}).get('net', 0)),
            },
            'expenses': float(report_data.get('expenses', 0)),
            'profit_margin': float(report_data.get('profit_margin', 0))
        }

    @staticmethod
    def prepare_monthly_report_for_export(report_data):
        """Oylik hisobotni export uchun tayyorlash"""
        return {
            'report_type': 'monthly',
            'generated_at': timezone.now().isoformat(),
            'shop': str(report_data.get('shop', '')),
            'year': report_data.get('year'),
            'month': report_data.get('month'),
            'period': {
                'start_date': str(report_data.get('period', {}).get('start_date', '')),
                'end_date': str(report_data.get('period', {}).get('end_date', '')),
                'working_days': report_data.get('period', {}).get('working_days', 0)
            },
            'totals': {
                'phone_sales_usd': float(report_data.get('totals', {}).get('phone_sales_usd', 0)),
                'accessory_sales_uzs': float(report_data.get('totals', {}).get('accessory_sales_uzs', 0)),
                'total_sales': float(report_data.get('totals', {}).get('sales', 0)),
                'expenses': float(report_data.get('totals', {}).get('expenses', 0)),
            },
            'profits': {
                'phone_profit': float(report_data.get('profits', {}).get('phone_profit', 0)),
                'accessory_profit': float(report_data.get('profits', {}).get('accessory_profit', 0)),
                'exchange_profit': float(report_data.get('profits', {}).get('exchange_profit', 0)),
                'total_profit': float(report_data.get('profits', {}).get('total_profit', 0)),
            },
            'counts': {
                'phone': report_data.get('counts', {}).get('phone', 0),
                'accessory': report_data.get('counts', {}).get('accessory', 0),
                'exchange': report_data.get('counts', {}).get('exchange', 0),
                'total': report_data.get('counts', {}).get('total', 0),
            },
            'profit_margin': float(report_data.get('profit_margin', 0))
        }

    @staticmethod
    def prepare_seller_salary_for_export(salary_data):
        """Sotuvchi maoshi hisobotini export uchun tayyorlash"""
        return {
            'report_type': 'seller_salary',
            'generated_at': timezone.now().isoformat(),
            'seller': str(salary_data.get('seller', '')),
            'year': salary_data.get('year'),
            'month': salary_data.get('month'),
            'sales': {
                'phone_count': salary_data.get('sales', {}).get('phone_count', 0),
                'accessory_count': salary_data.get('sales', {}).get('accessory_count', 0),
                'exchange_count': salary_data.get('sales', {}).get('exchange_count', 0),
                'returns_count': salary_data.get('sales', {}).get('returns_count', 0),
                'phone_total': float(salary_data.get('sales', {}).get('phone_total', 0)),
                'accessory_total': float(salary_data.get('sales', {}).get('accessory_total', 0)),
            },
            'profits': {
                'phone_profit': float(salary_data.get('profits', {}).get('phone_profit', 0)),
                'accessory_profit': float(salary_data.get('profits', {}).get('accessory_profit', 0)),
                'exchange_profit': float(salary_data.get('profits', {}).get('exchange_profit', 0)),
                'total_profit': float(salary_data.get('profits', {}).get('total_profit', 0)),
            },
            'commission': {
                'phone_commission': float(salary_data.get('commission', {}).get('phone_commission', 0)),
                'exchange_commission': float(salary_data.get('commission', {}).get('exchange_commission', 0)),
                'accessory_commission': float(salary_data.get('commission', {}).get('accessory_commission', 0)),
                'total_commission': float(salary_data.get('commission', {}).get('total_commission', 0)),
                'base_salary_usd': float(salary_data.get('commission', {}).get('base_salary_usd', 0)),
                'base_salary_uzs': float(salary_data.get('commission', {}).get('base_salary_uzs', 0)),
                'total_salary_usd': float(salary_data.get('commission', {}).get('total_salary_usd', 0)),
                'total_salary_uzs': float(salary_data.get('commission', {}).get('total_salary_uzs', 0)),
            }
        }


class ValidationHelper:
    """Validatsiya helper"""

    @staticmethod
    def validate_date_range(start_date, end_date):
        """Sana oralig'ini tekshirish"""
        if not start_date or not end_date:
            return False, "Sana ko'rsatilmagan"

        if start_date > end_date:
            return False, "Boshlanish sanasi tugash sanasidan katta bo'lishi mumkin emas"

        if (end_date - start_date).days > 365:
            return False, "Sana oralig'i 1 yildan oshmasligi kerak"

        return True, "OK"

    @staticmethod
    def validate_amount(amount, min_value=0, max_value=None):
        """Miqdorni tekshirish"""
        try:
            amount = Decimal(str(amount))

            if amount < min_value:
                return False, f"Miqdor {min_value} dan kam bo'lishi mumkin emas"

            if max_value is not None and amount > max_value:
                return False, f"Miqdor {max_value} dan katta bo'lishi mumkin emas"

            return True, "OK"
        except (ValueError, TypeError, InvalidOperation):
            return False, "Noto'g'ri miqdor"


# Decimal import qo'shish
