# reports/tests.py - YAKUNIY TO'G'RILANGAN

from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import date, timedelta
from decimal import Decimal

from shops.models import Shop, Customer
from inventory.models import Phone, PhoneModel, MemorySize, DailySeller, Accessory
from sales.models import (
    PhoneSale, AccessorySale,
    PhoneExchange, PhoneReturn, Expense
)
from reports.models import (
    CashFlowTransaction, ReportCalculator,
    ProfitCalculator, SalesQueryHelper
)


class CashFlowTransactionTestCase(TestCase):
    """CashFlowTransaction model testlari"""

    def setUp(self):
        """Test ma'lumotlarini tayyorlash"""
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123'
        )

        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.user
        )

    def test_cashflow_transaction_creation(self):
        """CashFlowTransaction yaratish testi"""
        transaction = CashFlowTransaction.objects.create(
            shop=self.shop,
            transaction_date=date.today(),
            transaction_type='phone_sale',
            amount_usd=Decimal('500.00'),
            amount_uzs=Decimal('0'),
            description='Test telefon sotildi',
            created_by=self.user
        )

        self.assertEqual(transaction.shop, self.shop)
        self.assertEqual(transaction.amount_usd, Decimal('500.00'))
        self.assertEqual(transaction.transaction_type, 'phone_sale')

    def test_cashflow_transaction_str(self):
        """CashFlowTransaction __str__ metodi testi"""
        transaction = CashFlowTransaction.objects.create(
            shop=self.shop,
            transaction_date=date.today(),
            transaction_type='phone_sale',
            amount_usd=Decimal('500.00'),
            description='Test'
        )

        str_repr = str(transaction)
        self.assertIn('Telefon sotildi', str_repr)
        self.assertIn('$500', str_repr)


class ProfitCalculatorTestCase(TestCase):
    """ProfitCalculator testlari"""

    def setUp(self):
        """Test ma'lumotlarini tayyorlash"""
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.user
        )

        # PhoneModel va MemorySize yaratish
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        # Phone yaratish
        self.phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            imei_cost=Decimal('0'),
            repair_cost=Decimal('0'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='123456789012345',
            created_at=date.today()
        )

        # Customer yaratish
        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_phone_profit_calculation(self):
        """Telefon foydasi hisoblash testi"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        profit_calc = ProfitCalculator()
        profit = profit_calc.calculate_phone_profit(phone_sale)

        # 1000 - 800 = 200
        self.assertEqual(profit, Decimal('200.00'))

    def test_accessory_profit_calculation(self):
        """Aksessuar foydasi hisoblash testi"""
        from inventory.models import AccessoryPurchaseHistory

        accessory = Accessory.objects.create(
            name='Test Accessory',
            shop=self.shop,
            code='0001',
            sale_price=Decimal('80000')
        )

        # Purchase history qo'shish
        AccessoryPurchaseHistory.objects.create(
            accessory=accessory,
            quantity=10,
            purchase_price=Decimal('50000'),
            created_by=self.user
        )

        # Accessory refresh qilish (purchase_price yangilandi)
        accessory.refresh_from_db()

        accessory_sale = AccessorySale.objects.create(
            accessory=accessory,
            customer=self.customer,
            salesman=self.user,
            quantity=2,
            unit_price=Decimal('80000'),
            cash_amount=Decimal('160000'),
            sale_date=date.today()
        )

        profit_calc = ProfitCalculator()
        profit = profit_calc.calculate_accessory_profit(accessory_sale)

        # total_price - (purchase_price * quantity)
        # 160000 - (50000 * 2) = 60000
        self.assertEqual(profit, Decimal('60000'))

    def test_exchange_profit_calculation(self):
        """Almashtirish foydasi hisoblash testi"""
        # Yangi telefon
        new_phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('900.00'),
            imei_cost=Decimal('0'),
            repair_cost=Decimal('0'),
            sale_price=Decimal('1200.00'),
            status='shop',
            source_type='supplier',
            imei='123456789012346',
            created_at=date.today()
        )

        # PhoneExchange yaratish - price_difference avtomatik hisoblash uchun
        exchange = PhoneExchange(
            old_phone_model=self.phone_model,
            old_phone_memory=self.memory,
            new_phone=new_phone,
            customer_name='Test Customer',
            customer_phone_number='998901234567',
            salesman=self.user,
            new_phone_price=Decimal('1200.00'),
            old_phone_accepted_price=Decimal('600.00'),
            exchange_type='customer_pays',
            cash_amount=Decimal('600.00'),
            exchange_date=date.today()
        )

        # calculate_price_difference chaqirish
        exchange.calculate_price_difference()
        exchange.save()

        profit_calc = ProfitCalculator()
        profit = profit_calc.calculate_exchange_profit(exchange)

        # 1200 - 900 = 300
        self.assertEqual(profit, Decimal('300.00'))


class SalesQueryHelperTestCase(TestCase):
    """SalesQueryHelper testlari"""

    def setUp(self):
        """Test ma'lumotlarini tayyorlash"""
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.user
        )

        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            imei_cost=Decimal('0'),
            repair_cost=Decimal('0'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='123456789012345',
            created_at=date.today()
        )

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_get_phone_sales_by_date(self):
        """Sana bo'yicha telefon sotuvlarini olish testi"""
        today = date.today()

        PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=today
        )

        helper = SalesQueryHelper()
        sales = helper.get_phone_sales(self.shop, start_date=today)

        self.assertEqual(sales.count(), 1)

    def test_get_phone_sales_by_salesman(self):
        """Sotuvchi bo'yicha telefon sotuvlarini olish testi"""
        user2 = User.objects.create_user(username='user2', password='test123')

        PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        helper = SalesQueryHelper()
        sales = helper.get_phone_sales(self.shop, salesman=self.user)

        self.assertEqual(sales.count(), 1)
        self.assertEqual(sales.first().salesman, self.user)


class ReportCalculatorTestCase(TestCase):
    """ReportCalculator testlari"""

    def setUp(self):
        """Test ma'lumotlarini tayyorlash"""
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.user
        )

        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            imei_cost=Decimal('0'),
            repair_cost=Decimal('0'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='123456789012345',
            created_at=date.today()
        )

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_daily_report_generation(self):
        """Kunlik hisobot yaratish testi"""
        today = date.today()

        PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=today
        )

        calculator = ReportCalculator(self.shop)
        report = calculator.get_daily_report(today)

        self.assertEqual(report['date'], today)
        self.assertEqual(report['counts']['phone'], 1)
        self.assertEqual(report['sales']['phone_total_usd'], Decimal('1000.00'))

    def test_seller_daily_report(self):
        """Sotuvchi kunlik hisobot testi"""
        today = date.today()

        PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=today
        )

        calculator = ReportCalculator(self.shop)
        report = calculator.get_seller_daily_report(self.user, today)

        self.assertEqual(report['seller'], self.user)
        self.assertEqual(report['counts']['phone'], 1)
        self.assertEqual(report['sales']['phone_total_usd'], Decimal('1000.00'))


class SignalTestCase(TestCase):
    """Signal testlari"""

    def setUp(self):
        """Test ma'lumotlarini tayyorlash"""
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.user
        )

        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            imei_cost=Decimal('0'),
            repair_cost=Decimal('0'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='123456789012345',
            created_at=date.today()
        )

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_phone_sale_creates_cashflow(self):
        """Telefon sotish cashflow yaratishni tekshirish"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        cashflow = CashFlowTransaction.objects.filter(
            related_phone_sale=phone_sale
        ).first()

        self.assertIsNotNone(cashflow)
        self.assertEqual(cashflow.transaction_type, 'phone_sale')
        self.assertEqual(cashflow.amount_usd, Decimal('1000.00'))

    def test_expense_creates_cashflow(self):
        """Xarajat cashflow yaratishni tekshirish"""
        expense = Expense.objects.create(
            shop=self.shop,
            name='Test Expense',
            amount=Decimal('100000'),
            expense_date=date.today(),
            created_by=self.user
        )

        cashflow = CashFlowTransaction.objects.filter(
            related_expense=expense
        ).first()

        self.assertIsNotNone(cashflow)
        self.assertEqual(cashflow.transaction_type, 'daily_expense')
        self.assertEqual(cashflow.amount_uzs, Decimal('-100000'))


class ViewTestCase(TestCase):
    """View testlari"""

    def setUp(self):
        """Test ma'lumotlarini tayyorlash"""
        self.client = Client()
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123'
        )
        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.user
        )

    def test_daily_report_view_requires_login(self):
        """Kunlik hisobot login talab qilishini tekshirish"""
        response = self.client.get('/reports/daily/')
        self.assertEqual(response.status_code, 302)  # Redirect to login

    def test_daily_report_view_with_login(self):
        """Login qilingandan keyin kunlik hisobot view testi"""
        self.client.login(username='testuser', password='testpass123')
        response = self.client.get('/reports/daily/')
        self.assertEqual(response.status_code, 200)