# reports/tests.py - YANGI USUL BILAN TO'LIQ TESTLAR

from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import date, timedelta
from decimal import Decimal
from calendar import monthrange

from shops.models import Shop, Customer
from inventory.models import Phone, PhoneModel, MemorySize, Accessory
from sales.models import (
    PhoneSale, AccessorySale,
    PhoneExchange, PhoneReturn, Expense
)
from reports.models import (
    CashFlowTransaction, ReportCalculator,
    ProfitCalculator, SalesQueryHelper
)


class CashFlowTransactionTestCase(TestCase):
    """CashFlowTransaction model testlari"""

    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123'
        )
        self.shop = Shop.objects.create(
            name='Test Shop',
            owner=self.user
        )

    def test_cashflow_transaction_creation(self):
        """CashFlowTransaction yaratish"""
        transaction = CashFlowTransaction.objects.create(
            shop=self.shop,
            transaction_date=date.today(),
            transaction_type='phone_sale',
            amount_usd=Decimal('500.00'),
            amount_uzs=Decimal('0'),
            description='Test telefon sotildi',
            created_by=self.user
        )

        self.assertEqual(transaction.shop, self.shop)
        self.assertEqual(transaction.amount_usd, Decimal('500.00'))
        self.assertEqual(transaction.transaction_type, 'phone_sale')

    def test_cashflow_negative_amount(self):
        """Manfiy summa bilan cashflow"""
        transaction = CashFlowTransaction.objects.create(
            shop=self.shop,
            transaction_date=date.today(),
            transaction_type='phone_return',
            amount_usd=Decimal('-400.00'),
            description='Qaytarish'
        )
        self.assertTrue(transaction.amount_usd < 0)


class ProfitCalculatorTestCase(TestCase):
    """ProfitCalculator testlari"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(name='Test Shop', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            imei_cost=Decimal('0'),
            repair_cost=Decimal('0'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='123456789012345',
            created_at=date.today()
        )

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_phone_profit_calculation(self):
        """Telefon foydasi hisoblash"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        profit_calc = ProfitCalculator()
        profit = profit_calc.calculate_phone_profit(phone_sale)
        self.assertEqual(profit, Decimal('200.00'))

    def test_accessory_profit_calculation(self):
        """Aksessuar foydasi hisoblash"""
        from inventory.models import AccessoryPurchaseHistory

        accessory = Accessory.objects.create(
            name='Test Accessory',
            shop=self.shop,
            code='0001',
            sale_price=Decimal('80000')
        )

        AccessoryPurchaseHistory.objects.create(
            accessory=accessory,
            quantity=10,
            purchase_price=Decimal('50000'),
            created_by=self.user
        )
        accessory.refresh_from_db()

        accessory_sale = AccessorySale.objects.create(
            accessory=accessory,
            customer=self.customer,
            salesman=self.user,
            quantity=2,
            unit_price=Decimal('80000'),
            cash_amount=Decimal('160000'),
            sale_date=date.today()
        )

        profit_calc = ProfitCalculator()
        profit = profit_calc.calculate_accessory_profit(accessory_sale)
        self.assertEqual(profit, Decimal('60000'))


class PhoneReturnNewMethodTestCase(TestCase):
    """YANGI USUL - is_returned flag testi"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(name='Test Shop', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phone1 = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='111111111111111',
            created_at=date.today()
        )

        self.phone2 = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='222222222222222',
            created_at=date.today()
        )

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_phone_sale_initial_is_returned_false(self):
        """Yangi sotish is_returned=False bo'lishi kerak"""
        sale = PhoneSale.objects.create(
            phone=self.phone1,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )
        self.assertFalse(sale.is_returned)

    def test_phone_return_sets_is_returned_true(self):
        """Qaytarish is_returned=True qilishi kerak"""
        sale = PhoneSale.objects.create(
            phone=self.phone1,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        PhoneReturn.objects.create(
            phone_sale=sale,
            return_amount=Decimal('1000.00'),
            return_date=date.today(),
            reason='Test return',
            created_by=self.user
        )

        sale.refresh_from_db()
        self.assertTrue(sale.is_returned)

    def test_multiple_sales_same_phone(self):
        """Bir telefonni bir necha marta sotish (ForeignKey)"""
        # Birinchi sotish
        sale1 = PhoneSale.objects.create(
            phone=self.phone1,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        # Qaytarish
        PhoneReturn.objects.create(
            phone_sale=sale1,
            return_amount=Decimal('1000.00'),
            return_date=date.today(),
            reason='Test',
            created_by=self.user
        )

        # Ikkinchi sotish - bir xil telefon!
        sale2 = PhoneSale.objects.create(
            phone=self.phone1,  # Bir xil telefon
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1100.00'),
            cash_amount=Decimal('1100.00'),
            sale_date=date.today()
        )

        # Tekshirish
        all_sales = PhoneSale.objects.filter(phone=self.phone1)
        self.assertEqual(all_sales.count(), 2)
        self.assertTrue(sale1.is_returned)
        self.assertFalse(sale2.is_returned)


class ReportCalculatorNewMethodTestCase(TestCase):
    """ReportCalculator - YANGI USUL testlari"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(name='Test Shop', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phones = []
        for i in range(5):
            phone = Phone.objects.create(
                phone_model=self.phone_model,
                memory_size=self.memory,
                shop=self.shop,
                purchase_price=Decimal('800.00'),
                sale_price=Decimal('1000.00'),
                status='shop',
                source_type='supplier',
                imei=f'11111111111111{i}',
                created_at=date.today()
            )
            self.phones.append(phone)

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_daily_report_with_returns(self):
        """Kunlik hisobot - qaytarilgan telefonlar bilan"""
        today = date.today()

        # 5 ta telefon sotish
        for phone in self.phones:
            PhoneSale.objects.create(
                phone=phone,
                customer=self.customer,
                salesman=self.user,
                sale_price=Decimal('1000.00'),
                cash_amount=Decimal('1000.00'),
                sale_date=today
            )

        # 2 tasini qaytarish
        sales_to_return = PhoneSale.objects.all()[:2]
        for sale in sales_to_return:
            PhoneReturn.objects.create(
                phone_sale=sale,
                return_amount=Decimal('1000.00'),
                return_date=today,
                reason='Test',
                created_by=self.user
            )

        calculator = ReportCalculator(self.shop)
        report = calculator.get_daily_report(today)

        # 5 ta sotildi - 2 ta qaytarildi = 3 ta sof
        self.assertEqual(report['counts']['phone'], 3)
        self.assertEqual(report['counts']['returns'], 2)

    def test_monthly_report_with_previous_month_returns(self):
        """Oylik hisobot - oldingi oyda sotilgan, bu oyda qaytarilgan"""
        today = date.today()
        last_month = today - timedelta(days=30)

        # O'tgan oyda sotish
        sale = PhoneSale.objects.create(
            phone=self.phones[0],
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=last_month
        )

        # Bu oyda qaytarish
        PhoneReturn.objects.create(
            phone_sale=sale,
            return_amount=Decimal('1000.00'),
            return_date=today,
            reason='Test',
            created_by=self.user
        )

        # Bu oyda 2 ta yangi sotish
        for phone in self.phones[1:3]:
            PhoneSale.objects.create(
                phone=phone,
                customer=self.customer,
                salesman=self.user,
                sale_price=Decimal('1000.00'),
                cash_amount=Decimal('1000.00'),
                sale_date=today
            )

        calculator = ReportCalculator(self.shop)
        report = calculator.get_monthly_report(today.year, today.month)

        # Bu oyda 2 ta sotildi
        self.assertEqual(report['counts']['phone'], 2)

        # 1 ta qaytarish (oldingi oydan)
        self.assertEqual(report['counts']['returns_previous_months'], 1)


class SellerSalaryTestCase(TestCase):
    """Sotuvchi maoshi testlari"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(name='Test Shop', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phones = []
        for i in range(3):
            phone = Phone.objects.create(
                phone_model=self.phone_model,
                memory_size=self.memory,
                shop=self.shop,
                purchase_price=Decimal('800.00'),
                sale_price=Decimal('1000.00'),
                status='shop',
                source_type='supplier',
                imei=f'33333333333333{i}',
                created_at=date.today()
            )
            self.phones.append(phone)

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_seller_monthly_salary_with_returns(self):
        """Sotuvchi oylik maoshi - qaytarilgan telefonlar bilan"""
        today = date.today()
        last_month_date = today - timedelta(days=35)

        # O'tgan oyda 1 ta sotish
        sale1 = PhoneSale.objects.create(
            phone=self.phones[0],
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=last_month_date
        )

        # Bu oyda qaytarish
        PhoneReturn.objects.create(
            phone_sale=sale1,
            return_amount=Decimal('1000.00'),
            return_date=today,
            reason='Test',
            created_by=self.user
        )

        # Bu oyda 2 ta yangi sotish
        for phone in self.phones[1:3]:
            PhoneSale.objects.create(
                phone=phone,
                customer=self.customer,
                salesman=self.user,
                sale_price=Decimal('1000.00'),
                cash_amount=Decimal('1000.00'),
                sale_date=today
            )

        calculator = ReportCalculator(self.shop)
        salary_data = calculator.get_seller_monthly_salary(
            self.user, today.year, today.month
        )

        # Bu oyda 2 ta sotildi
        self.assertEqual(salary_data['sales']['phone_count'], 2)

        # 1 ta qaytarilgan (oldingi oydan)
        self.assertEqual(salary_data['sales']['returns_count'], 1)

        # Foyda = (2 × 200) - (1 × 200) = 200
        expected_profit = Decimal('200.00')
        self.assertEqual(salary_data['profits']['phone_profit'], expected_profit)


class SignalTestCase(TestCase):
    """Signal testlari"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.shop = Shop.objects.create(name='Test Shop', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory = MemorySize.objects.create(size='128GB')

        self.phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('800.00'),
            sale_price=Decimal('1000.00'),
            status='shop',
            source_type='supplier',
            imei='444444444444444',
            created_at=date.today()
        )

        self.customer = Customer.objects.create(
            name='Test Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_phone_sale_creates_cashflow(self):
        """Telefon sotish cashflow yaratadi"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        cashflow = CashFlowTransaction.objects.filter(
            related_phone_sale=phone_sale
        ).first()

        self.assertIsNotNone(cashflow)
        self.assertEqual(cashflow.transaction_type, 'phone_sale')
        self.assertEqual(cashflow.amount_usd, Decimal('1000.00'))

    def test_phone_return_creates_negative_cashflow(self):
        """Qaytarish manfiy cashflow yaratadi"""
        phone_sale = PhoneSale.objects.create(
            phone=self.phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1000.00'),
            cash_amount=Decimal('1000.00'),
            sale_date=date.today()
        )

        phone_return = PhoneReturn.objects.create(
            phone_sale=phone_sale,
            return_amount=Decimal('1000.00'),
            return_date=date.today(),
            reason='Test',
            created_by=self.user
        )

        cashflow = CashFlowTransaction.objects.filter(
            related_return=phone_return
        ).first()

        self.assertIsNotNone(cashflow)
        self.assertEqual(cashflow.transaction_type, 'phone_return')
        self.assertEqual(cashflow.amount_usd, Decimal('-1000.00'))


class IntegrationTestCase(TestCase):
    """To'liq integratsiya testi"""

    def setUp(self):
        self.user = User.objects.create_user(username='seller', password='test123')
        self.shop = Shop.objects.create(name='Main Shop', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15 Pro')
        self.memory = MemorySize.objects.create(size='256GB')

        self.customer = Customer.objects.create(
            name='VIP Customer',
            phone_number='998901234567',
            created_by=self.user
        )

    def test_full_lifecycle_with_return_and_resale(self):
        """To'liq sikl: sotish → qaytarish → qayta sotish"""

        # 1. TELEFON YARATISH
        phone = Phone.objects.create(
            phone_model=self.phone_model,
            memory_size=self.memory,
            shop=self.shop,
            purchase_price=Decimal('900.00'),
            sale_price=Decimal('1200.00'),
            status='shop',
            source_type='supplier',
            imei='555555555555555',
            created_at=date.today()
        )

        # 2. BIRINCHI SOTISH (1-oktyabr)
        first_date = date(2024, 10, 1)
        sale1 = PhoneSale.objects.create(
            phone=phone,
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1200.00'),
            cash_amount=Decimal('1200.00'),
            sale_date=first_date
        )
        self.assertEqual(phone.phone_sales.count(), 1)

        # 3. QAYTARISH (5-oktyabr)
        return_date = date(2024, 10, 5)
        phone_return = PhoneReturn.objects.create(
            phone_sale=sale1,
            return_amount=Decimal('1200.00'),
            return_date=return_date,
            reason='Mijoz xohlamadi',
            created_by=self.user
        )

        sale1.refresh_from_db()
        phone.refresh_from_db()

        self.assertTrue(sale1.is_returned)
        self.assertEqual(phone.status, 'returned')

        # 4. QAYTA SOTISH (10-oktyabr)
        resale_date = date(2024, 10, 10)
        sale2 = PhoneSale.objects.create(
            phone=phone,  # Bir xil telefon!
            customer=self.customer,
            salesman=self.user,
            sale_price=Decimal('1100.00'),
            cash_amount=Decimal('1100.00'),
            sale_date=resale_date
        )

        phone.refresh_from_db()
        self.assertEqual(phone.status, 'sold')

        # 5. HISOBOT TEKSHIRISH
        calculator = ReportCalculator(self.shop)

        # Oktyabr oyi hisoboti
        monthly = calculator.get_monthly_report(2024, 10)

        # 2 ta sotish, 1 ta qaytarilgan = 1 ta sof
        self.assertEqual(monthly['counts']['phone'], 1)
        self.assertEqual(monthly['counts']['returns'], 1)

        # Foyda faqat ikkinchi sotishdan
        expected_profit = Decimal('200.00')  # 1100 - 900
        self.assertEqual(monthly['profits']['phone_profit'], expected_profit)

    def test_yearly_report_accuracy(self):
        """Yillik hisobot aniqligi"""
        year = 2024

        # Har oyda 1 ta telefon sotish
        for month in range(1, 13):
            phone = Phone.objects.create(
                phone_model=self.phone_model,
                memory_size=self.memory,
                shop=self.shop,
                purchase_price=Decimal('800.00'),
                sale_price=Decimal('1000.00'),
                status='shop',
                source_type='supplier',
                imei=f'66666666666{month:02d}',
                created_at=date(year, month, 1)
            )

            PhoneSale.objects.create(
                phone=phone,
                customer=self.customer,
                salesman=self.user,
                sale_price=Decimal('1000.00'),
                cash_amount=Decimal('1000.00'),
                sale_date=date(year, month, 15)
            )

        calculator = ReportCalculator(self.shop)
        yearly = calculator.get_yearly_report(year)

        # 12 ta telefon
        self.assertEqual(yearly['counts']['phone'], 12)

        # Jami savdo
        expected_sales = Decimal('12000.00')
        self.assertEqual(yearly['totals']['phone_sales'], expected_sales)

        # Jami foyda
        expected_profit = Decimal('2400.00')  # 12 × 200
        self.assertEqual(yearly['profits']['phone_profit'], expected_profit)


# Test ishga tushirish
if __name__ == '__main__':
    import unittest

    unittest.main()