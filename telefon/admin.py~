# from django.contrib import admin
# from django.utils.html import format_html
# from django.utils import timezone
# from .models import (
#     UserProfile, Shop, Customer, Supplier, PhoneModel, MemorySize,
#     Accessory, Master, MasterService, MasterPayment, Phone, PhoneSale,
#     AccessorySale, PhoneExchange, Debt, DebtPayment, Expense, DailyReport, MonthlyReport
# )
#
#
# @admin.register(UserProfile)
# class UserProfileAdmin(admin.ModelAdmin):
#     list_display = ("user", "role", "phone_number", "created_at")
#     list_filter = ("role",)
#     search_fields = ("user__username", "user__first_name", "user__last_name")
#     readonly_fields = ("created_at",)
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('user')
#
#
# @admin.register(Shop)
# class ShopAdmin(admin.ModelAdmin):
#     list_display = ("name", "owner", "created_at")
#     search_fields = ("name", "owner__username")
#     list_filter = ("created_at",)
#     readonly_fields = ("created_at",)
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('owner')
#
#
# @admin.register(Customer)
# class CustomerAdmin(admin.ModelAdmin):
#     list_display = ("name", "phone_number", "shop", "total_debt_display", "total_purchases_display", "created_at")
#     list_filter = ("shop", "created_at")
#     search_fields = ("name", "phone_number")
#     readonly_fields = ("created_at",)
#
#     def total_debt_display(self, obj):
#         debt = obj.total_debt
#         if debt > 0:
#             return format_html('<span style="color: red;">${}</span>', int(debt))
#         return "$0"
#
#     total_debt_display.short_description = "Qarzi"
#
#     def total_purchases_display(self, obj):
#         total = obj.total_purchases
#         return format_html('<span style="color: blue;">${}</span>', int(total))
#
#     total_purchases_display.short_description = "Xaridlar"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('shop').prefetch_related('debts', 'phone_sales',
#                                                                                      'accessory_sales',
#                                                                                      'phone_exchanges')
#
#     class PhoneSaleInline(admin.TabularInline):
#         model = PhoneSale
#         extra = 0
#         fields = ('phone', 'sale_price', 'cash_amount', 'card_amount', 'credit_amount', 'debt_amount', 'salesman')
#         readonly_fields = ('sale_price', 'cash_amount', 'card_amount', 'credit_amount', 'debt_amount')
#
#     class AccessorySaleInline(admin.TabularInline):
#         model = AccessorySale
#         extra = 0
#         fields = ('accessory', 'quantity', 'total_sale_price', 'cash_amount', 'card_amount', 'debt_amount', 'salesman')
#         readonly_fields = ('total_sale_price', 'cash_amount', 'card_amount', 'debt_amount')
#
#     class PhoneExchangeInline(admin.TabularInline):
#         model = PhoneExchange
#         extra = 0
#         fields = ('new_phone', 'old_phone_model', 'old_phone_memory', 'new_phone_price', 'cash_amount', 'card_amount',
#                   'credit_amount', 'debt_amount', 'salesman')
#         readonly_fields = ('new_phone_price', 'cash_amount', 'card_amount', 'credit_amount', 'debt_amount')
#
#     inlines = [PhoneSaleInline, AccessorySaleInline, PhoneExchangeInline]
#
#
# @admin.register(Supplier)
# class SupplierAdmin(admin.ModelAdmin):
#     list_display = ("name", "phone_number", "created_at")
#     search_fields = ("name", "phone_number")
#     list_filter = ("created_at",)
#     readonly_fields = ("created_at",)
#
#
# @admin.register(PhoneModel)
# class PhoneModelAdmin(admin.ModelAdmin):
#     list_display = ("model_name", "created_at")
#     search_fields = ("model_name",)
#     readonly_fields = ("created_at",)
#
#
# @admin.register(MemorySize)
# class MemorySizeAdmin(admin.ModelAdmin):
#     list_display = ("size", "created_at")
#     search_fields = ("size",)
#     readonly_fields = ("created_at",)
#
#
# @admin.register(Accessory)
# class AccessoryAdmin(admin.ModelAdmin):
#     list_display = ("name", "code", "shop", "purchase_price", "sale_price", "quantity", "created_at")
#     list_filter = ("shop", "created_at")
#     search_fields = ("name", "code")
#     readonly_fields = ("created_at",)
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('shop', 'supplier', 'created_by')
#
#     class AccessorySaleInline(admin.TabularInline):
#         model = AccessorySale
#         extra = 0
#         fields = (
#         'customer_name', 'quantity', 'total_sale_price', 'cash_amount', 'card_amount', 'debt_amount', 'salesman')
#         readonly_fields = ('total_sale_price', 'cash_amount', 'card_amount', 'debt_amount')
#
#     inlines = [AccessorySaleInline]
#
#
# @admin.register(Master)
# class MasterAdmin(admin.ModelAdmin):
#     list_display = (
#         "full_name",
#         "phone_number",
#         "active_repairs_count_display",
#         "overdue_repairs_count_display",
#         "total_unpaid_amount_display",
#         "created_at"
#     )
#     search_fields = ("first_name", "last_name", "phone_number")
#     list_filter = ("created_at",)
#     readonly_fields = ("created_at",)
#
#     fieldsets = (
#         ('Shaxsiy ma\'lumotlar', {
#             'fields': ('first_name', 'last_name', 'phone_number')
#         }),
#         ('Statistika', {
#             'fields': ('active_repairs_count_display', 'overdue_repairs_count_display', 'total_unpaid_amount_display'),
#             'classes': ('collapse',)
#         })
#     )
#
#     def full_name(self, obj):
#         return f"{obj.first_name} {obj.last_name}"
#
#     full_name.short_description = "Ism"
#
#     def active_repairs_count_display(self, obj):
#         count = obj.active_repairs_count
#         if count > 0:
#             return format_html('<span style="color: blue; font-weight: bold;">{}</span>', count)
#         return "0"
#
#     active_repairs_count_display.short_description = "Faol ishlar"
#
#     def overdue_repairs_count_display(self, obj):
#         count = obj.overdue_repairs_count
#         if count > 0:
#             return format_html('<span style="color: red; font-weight: bold;">{}</span>', count)
#         return "0"
#
#     overdue_repairs_count_display.short_description = "Muddat o'tgan"
#
#     def total_unpaid_amount_display(self, obj):
#         unpaid = obj.total_unpaid_amount
#         if unpaid > 0:
#             return format_html('<span style="color: red;">${}</span>', int(unpaid))
#         return "$0"
#
#     total_unpaid_amount_display.short_description = "To'lanmagan summa"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).prefetch_related('master_services')
#
#     class MasterServiceInline(admin.TabularInline):
#         model = MasterService
#         extra = 0
#         fields = ('phone', 'service_fee', 'paid_amount', 'status', 'given_date', 'expected_return_date')
#         readonly_fields = ('service_fee', 'paid_amount')
#
#     inlines = [MasterServiceInline]
#
#
# @admin.register(MasterService)
# class MasterServiceAdmin(admin.ModelAdmin):
#     list_display = (
#         'phone',
#         'master',
#         'service_fee',
#         'paid_amount',
#         'remaining_amount_display',
#         'status',
#         'given_date',
#         'expected_return_date',
#         'is_overdue_display',
#         'debt_info'
#     )
#     list_filter = ('status', 'master', 'given_date', 'expected_return_date')
#     search_fields = ('phone__imei', 'phone__phone_model__model_name', 'master__first_name', 'master__last_name')
#     readonly_fields = ('created_at', 'is_overdue', 'remaining_amount')
#
#     fieldsets = (
#         ('Asosiy ma\'lumotlar', {
#             'fields': ('phone', 'master', 'status')
#         }),
#         ('Ta\'mirlash ma\'lumotlari', {
#             'fields': ('repair_reasons', 'service_fee', 'paid_amount')
#         }),
#         ('Sanalar', {
#             'fields': ('given_date', 'expected_return_date')
#         }),
#         ('Tizim ma\'lumotlari', {
#             'fields': ('created_at', 'is_overdue', 'remaining_amount', 'debt'),
#             'classes': ('collapse',)
#         })
#     )
#
#     def remaining_amount_display(self, obj):
#         remaining = obj.remaining_amount
#         if remaining > 0:
#             return format_html('<span style="color: red;">${}</span>', int(remaining))
#         return "$0"
#
#     remaining_amount_display.short_description = "Qolgan summa"
#
#     def is_overdue_display(self, obj):
#         if obj.is_overdue:
#             return format_html('<span style="color: red; font-weight: bold;">HA</span>')
#         return "Yo'q"
#
#     is_overdue_display.short_description = "Muddat o'tgan"
#
#     def debt_info(self, obj):
#         if obj.debt:
#             creditor = obj.debt.creditor.get_full_name() or obj.debt.creditor.username
#             return format_html(
#                 '<span style="color: purple;">Qarz: ${} | Kreditor: {}</span>',
#                 int(obj.debt.debt_amount), creditor
#             )
#         return "Qarz yo'q"
#
#     debt_info.short_description = "Qarz ma'lumoti"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('phone__phone_model', 'phone__memory_size', 'master',
#                                                             'debt__creditor')
#
#     actions = ['mark_as_completed']
#
#     def mark_as_completed(self, request, queryset):
#         updated = queryset.update(status='completed')
#         for obj in queryset:
#             obj.save()  # Telefon statusini yangilash uchun
#         self.message_user(request, f'{updated} ta xizmat tugallangan deb belgilandi.')
#
#     mark_as_completed.short_description = "Tugallangan deb belgilash"
#
#
# @admin.register(MasterPayment)
# class MasterPaymentAdmin(admin.ModelAdmin):
#     list_display = (
#         "master_service_display",
#         "phone_display",
#         "payment_amount",
#         "payment_date",
#         "paid_by",
#         "debt_info"
#     )
#     list_filter = ("payment_date", "paid_by", "master_service__master")
#     search_fields = (
#         "master_service__master__first_name",
#         "master_service__master__last_name",
#         "master_service__phone__imei"
#     )
#     readonly_fields = ("payment_date",)
#
#     def master_service_display(self, obj):
#         return f"{obj.master_service.master} - {obj.master_service.get_status_display()}"
#
#     master_service_display.short_description = "Usta va holati"
#
#     def phone_display(self, obj):
#         return f"{obj.master_service.phone.phone_model} {obj.master_service.phone.memory_size}"
#
#     phone_display.short_description = "Telefon"
#
#     def debt_info(self, obj):
#         if obj.master_service.debt:
#             creditor = obj.master_service.debt.creditor.get_full_name() or obj.master_service.debt.creditor.username
#             return format_html(
#                 '<span style="color: purple;">Qarz: ${} | Kreditor: {}</span>',
#                 int(obj.master_service.debt.debt_amount), creditor
#             )
#         return "Qarz yo'q"
#
#     debt_info.short_description = "Qarz ma'lumoti"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related(
#             'master_service__master',
#             'master_service__phone__phone_model',
#             'master_service__phone__memory_size',
#             'paid_by',
#             'master_service__debt__creditor'
#         )
#
#
# @admin.register(Phone)
# class PhoneAdmin(admin.ModelAdmin):
#     list_display = (
#         "phone_display",
#         "imei",
#         "cost_price",
#         "sale_price",
#         "status_display",
#         "shop",
#         "source_type_display",
#         "created_at"
#     )
#     list_filter = ("shop", "status", "phone_model", "source_type", "created_at")
#     search_fields = ("imei", "phone_model__model_name", "memory_size__size")
#     readonly_fields = ("created_at", "cost_price", "repair_cost")
#
#     fieldsets = (
#         ('Asosiy ma\'lumotlar', {
#             'fields': ('shop', 'phone_model', 'memory_size', 'imei', 'status')
#         }),
#         ('Narxlar', {
#             'fields': ('purchase_price', 'imei_cost', 'repair_cost', 'cost_price', 'sale_price')
#         }),
#         ('Manba ma\'lumotlari', {
#             'fields': ('source_type', 'supplier', 'client_name', 'client_phone_number', 'exchange_value',
#                        'original_owner_name', 'original_owner_phone')
#         }),
#         ('Qoshimcha', {
#             'fields': ('image', 'condition_percentage', 'created_by', 'created_at'),
#             'classes': ('collapse',)
#         })
#     )
#
#     def phone_display(self, obj):
#         return f"{obj.phone_model} {obj.memory_size}"
#
#     phone_display.short_description = "Telefon"
#
#     def status_display(self, obj):
#         colors = {
#             'shop': 'blue',
#             'master': 'orange',
#             'sold': 'green',
#             'returned': 'red',
#             'exchanged_in': 'purple'
#         }
#         color = colors.get(obj.status, 'black')
#         return format_html('<span style="color: {}; font-weight: bold;">{}</span>', color, obj.get_status_display())
#
#     status_display.short_description = "Holati"
#
#     def source_type_display(self, obj):
#         return obj.get_source_type_display()
#
#     source_type_display.short_description = "Manba turi"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('shop', 'phone_model', 'memory_size', 'supplier',
#                                                             'created_by')
#
#     class PhoneSaleInline(admin.TabularInline):
#         model = PhoneSale
#         extra = 0
#         fields = (
#         'customer_name', 'sale_price', 'cash_amount', 'card_amount', 'credit_amount', 'debt_amount', 'salesman')
#         readonly_fields = ('sale_price', 'cash_amount', 'card_amount', 'credit_amount', 'debt_amount')
#
#     inlines = [PhoneSaleInline]
#
#
# @admin.register(PhoneSale)
# class PhoneSaleAdmin(admin.ModelAdmin):
#     list_display = (
#         "phone",
#         "customer_name",
#         "customer_phone",
#         "sale_price",
#         "payment_summary",
#         "profit_display",
#         "salesman",
#         "debt_info",
#         "created_at"
#     )
#     list_filter = ("salesman", "created_at", "phone__shop", "debt_amount")
#     search_fields = ("phone__imei", "customer_name", "customer_phone")
#     readonly_fields = ("created_at", "updated_at", "phone_cost_price")
#
#     def payment_summary(self, obj):
#         return format_html(
#             'Naqd: <span style="color: green;">${}</span> | '
#             'Karta: <span style="color: blue;">${}</span> | '
#             'Nasiya: <span style="color: orange;">${}</span> | '
#             'Qarz: <span style="color: red;">${}</span>',
#             int(obj.cash_amount), int(obj.card_amount), int(obj.credit_amount), int(obj.debt_amount)
#         )
#
#     payment_summary.short_description = "To'lovlar"
#
#     def profit_display(self, obj):
#         profit = obj.profit
#         color = "green" if profit >= 0 else "red"
#         return format_html('<span style="color: {};">${}</span>', color, int(profit))
#
#     profit_display.short_description = "Foyda"
#
#     def debt_info(self, obj):
#         debts = []
#         if obj.customer_debt:
#             creditor = obj.customer_debt.creditor.get_full_name() or obj.customer_debt.creditor.username
#             debts.append(f"Mijoz qarzi: ${int(obj.customer_debt.debt_amount)} (Kreditor: {creditor})")
#         if obj.seller_debt:
#             creditor = obj.seller_debt.creditor.get_full_name() or obj.seller_debt.creditor.username
#             debts.append(f"Sotuvchi qarzi: ${int(obj.seller_debt.debt_amount)} (Kreditor: {creditor})")
#         if debts:
#             return format_html('<span style="color: purple;">{}</span>', "; ".join(debts))
#         return "Qarz yo'q"
#
#     debt_info.short_description = "Qarz ma'lumoti"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related(
#             'phone__shop', 'phone__phone_model', 'phone__memory_size',
#             'salesman', 'customer', 'customer_debt__creditor', 'seller_debt__creditor'
#         )
#
#     class DebtInline(admin.TabularInline):
#         model = Debt
#         extra = 0
#         fk_name = 'related_phone_sale'
#         fields = ('debt_type', 'creditor', 'debt_amount', 'paid_amount', 'status')
#         readonly_fields = ('debt_amount', 'paid_amount', 'status')
#
#     inlines = [DebtInline]
#
#
# @admin.register(AccessorySale)
# class AccessorySaleAdmin(admin.ModelAdmin):
#     list_display = (
#         "accessory",
#         "customer_name",
#         "customer_phone",
#         "quantity",
#         "total_sale_price",
#         "payment_summary",
#         "profit_display",
#         "salesman",
#         "debt_info",
#         "created_at"
#     )
#     list_filter = ("salesman", "created_at", "accessory__shop", "debt_amount")
#     search_fields = ("accessory__name", "accessory__code", "customer_name", "customer_phone")
#     readonly_fields = ("created_at", "updated_at", "total_sale_price", "unit_cost_price", "total_cost_price")
#
#     def payment_summary(self, obj):
#         return format_html(
#             'Naqd: <span style="color: green;">${}</span> | '
#             'Karta: <span style="color: blue;">${}</span> | '
#             'Qarz: <span style="color: red;">${}</span>',
#             int(obj.cash_amount), int(obj.card_amount), int(obj.debt_amount)
#         )
#
#     payment_summary.short_description = "To'lovlar"
#
#     def profit_display(self, obj):
#         profit = obj.profit
#         color = "green" if profit >= 0 else "red"
#         return format_html('<span style="color: {};">${}</span>', color, int(profit))
#
#     profit_display.short_description = "Foyda"
#
#     def debt_info(self, obj):
#         debts = []
#         if obj.customer_debt:
#             creditor = obj.customer_debt.creditor.get_full_name() or obj.customer_debt.creditor.username
#             debts.append(f"Mijoz qarzi: ${int(obj.customer_debt.debt_amount)} (Kreditor: {creditor})")
#         if obj.seller_debt:
#             creditor = obj.seller_debt.creditor.get_full_name() or obj.seller_debt.creditor.username
#             debts.append(f"Sotuvchi qarzi: ${int(obj.seller_debt.debt_amount)} (Kreditor: {creditor})")
#         if debts:
#             return format_html('<span style="color: purple;">{}</span>', "; ".join(debts))
#         return "Qarz yo'q"
#
#     debt_info.short_description = "Qarz ma'lumoti"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related(
#             'accessory__shop', 'salesman', 'customer',
#             'customer_debt__creditor', 'seller_debt__creditor'
#         )
#
#     class DebtInline(admin.TabularInline):
#         model = Debt
#         extra = 0
#         fk_name = 'related_accessory_sale'
#         fields = ('debt_type', 'creditor', 'debt_amount', 'paid_amount', 'status')
#         readonly_fields = ('debt_amount', 'paid_amount', 'status')
#
#     inlines = [DebtInline]
#
#
# @admin.register(PhoneExchange)
# class PhoneExchangeAdmin(admin.ModelAdmin):
#     list_display = (
#         "customer_name",
#         "customer_phone",
#         "exchange_display",
#         "price_difference",
#         "payment_summary",
#         "profit_display",
#         "salesman",
#         "debt_info",
#         "created_at"
#     )
#     list_filter = ("salesman", "created_at", "new_phone__shop", "debt_amount")
#     search_fields = ("customer_name", "customer_phone", "old_phone_model", "new_phone__imei")
#     readonly_fields = ("created_at", "updated_at", "price_difference")
#
#     def exchange_display(self, obj):
#         return format_html('{} {} → <strong>{}</strong>', obj.old_phone_model, obj.old_phone_memory, obj.new_phone)
#
#     exchange_display.short_description = "Almashtirish"
#
#     def payment_summary(self, obj):
#         return format_html(
#             'Naqd: <span style="color: green;">${}</span> | '
#             'Karta: <span style="color: blue;">${}</span> | '
#             'Nasiya: <span style="color: orange;">${}</span> | '
#             'Qarz: <span style="color: red;">${}</span>',
#             int(obj.cash_amount), int(obj.card_amount), int(obj.credit_amount), int(obj.debt_amount)
#         )
#
#     payment_summary.short_description = "To'lovlar"
#
#     def profit_display(self, obj):
#         # Almashtirish uchun foyda = narx farqi - eski telefon qiymati + yangi telefon foydasi
#         new_phone_cost = obj.new_phone.cost_price
#         new_phone_price = obj.new_phone_price
#         new_phone_profit = new_phone_price - new_phone_cost
#         old_phone_loss = obj.old_phone_value  # Bu yo'qotish
#         total_profit = new_phone_profit - old_phone_loss
#
#         color = "green" if total_profit >= 0 else "red"
#         return format_html('<span style="color: {};">${}</span>', color, int(total_profit))
#
#     profit_display.short_description = "Foyda"
#
#     def debt_info(self, obj):
#         debts = []
#         if hasattr(obj, 'customer_debt') and obj.customer_debt:
#             creditor = obj.customer_debt.creditor.get_full_name() or obj.customer_debt.creditor.username
#             debts.append(f"Mijoz qarzi: ${int(obj.customer_debt.debt_amount)} (Kreditor: {creditor})")
#         if hasattr(obj, 'seller_debt') and obj.seller_debt:
#             creditor = obj.seller_debt.creditor.get_full_name() or obj.seller_debt.creditor.username
#             debts.append(f"Sotuvchi qarzi: ${int(obj.seller_debt.debt_amount)} (Kreditor: {creditor})")
#         if debts:
#             return format_html('<span style="color: purple;">{}</span>', "; ".join(debts))
#         return "Qarz yo'q"
#
#     debt_info.short_description = "Qarz ma'lumoti"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related(
#             'new_phone__shop', 'new_phone__phone_model', 'new_phone__memory_size',
#             'salesman', 'customer', 'customer_debt__creditor', 'seller_debt__creditor'
#         )
#
#     class DebtInline(admin.TabularInline):
#         model = Debt
#         extra = 0
#         fk_name = 'related_phone_exchange'
#         fields = ('debt_type', 'creditor', 'debt_amount', 'paid_amount', 'status')
#         readonly_fields = ('debt_amount', 'paid_amount', 'status')
#
#     inlines = [DebtInline]
#
#
# @admin.register(Debt)
# class DebtAdmin(admin.ModelAdmin):
#     list_display = (
#         "debtor_display",
#         "creditor_display",
#         "debt_type",
#         "debt_amount",
#         "paid_amount",
#         "remaining_display",
#         "status",
#         "created_at"
#     )
#     list_filter = ("debt_type", "status", "created_at")
#     search_fields = ("customer__name", "customer__phone_number", "debtor_user__username", "creditor__username")
#     readonly_fields = ("created_at", "updated_at", "remaining_amount")
#
#     def debtor_display(self, obj):
#         if obj.customer:
#             return f"{obj.customer.name} (Mijoz)"
#         elif obj.debtor_user:
#             return f"{obj.debtor_user.get_full_name() or obj.debtor_user.username} (Foydalanuvchi)"
#         return "Noma'lum"
#
#     debtor_display.short_description = "Qarzdor"
#
#     def creditor_display(self, obj):
#         return obj.creditor.get_full_name() or obj.creditor.username
#
#     creditor_display.short_description = "Kreditor"
#
#     def remaining_display(self, obj):
#         remaining = obj.remaining_amount
#         if remaining > 0:
#             return format_html('<span style="color: red; font-weight: bold;">${}</span>', int(remaining))
#         return "$0"
#
#     remaining_display.short_description = "Qolgan"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related(
#             'creditor', 'debtor_user', 'customer', 'related_phone_sale',
#             'related_accessory_sale', 'related_phone_exchange'
#         )
#
#     class DebtPaymentInline(admin.TabularInline):
#         model = DebtPayment
#         extra = 0
#         fields = ('payment_amount', 'payment_date', 'received_by', 'notes')
#         readonly_fields = ('payment_date',)
#
#     inlines = [DebtPaymentInline]
#
#
# @admin.register(DebtPayment)
# class DebtPaymentAdmin(admin.ModelAdmin):
#     list_display = ("debtor_display", "creditor_display", "payment_amount", "payment_date", "received_by")
#     list_filter = ("payment_date", "received_by", "debt__debt_type")
#     search_fields = ("debt__customer__name", "debt__debtor_user__username", "debt__creditor__username")
#     readonly_fields = ("payment_date",)
#
#     def debtor_display(self, obj):
#         if obj.debt.customer:
#             return f"{obj.debt.customer.name} (Mijoz)"
#         elif obj.debt.debtor_user:
#             return f"{obj.debt.debtor_user.get_full_name() or obj.debt.debtor_user.username} (Foydalanuvchi)"
#         elif obj.debt.debt_type == 'master_service':
#             return "Usta xizmati"
#         return "Noma'lum"
#
#     debtor_display.short_description = "Qarzdor"
#
#     def creditor_display(self, obj):
#         return obj.debt.creditor.get_full_name() or obj.debt.creditor.username
#
#     creditor_display.short_description = "Kreditor"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related(
#             'debt__customer', 'debt__debtor_user', 'debt__creditor', 'received_by'
#         )
#
#
# @admin.register(Expense)
# class ExpenseAdmin(admin.ModelAdmin):
#     list_display = ("name", "amount", "expense_date", "shop", "created_by", "created_at")
#     list_filter = ("shop", "expense_date", "created_by", "created_at")
#     search_fields = ("name",)
#     readonly_fields = ("created_at",)
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('shop', 'created_by')
#
#
# @admin.register(DailyReport)
# class DailyReportAdmin(admin.ModelAdmin):
#     list_display = (
#         "shop",
#         "report_date",
#         "sales_summary",
#         "payment_summary",
#         "cash_balance_display",
#         "total_income",
#         "total_expenses_display",
#         "created_at"
#     )
#     list_filter = ("shop", "report_date")
#     readonly_fields = (
#         "phones_sold_count", "phone_sales_total", "phone_sales_profit",
#         "accessories_sold_count", "accessory_sales_total", "accessory_sales_profit",
#         "exchanges_count", "exchange_new_phones_sold_value", "exchange_phones_accepted_count",
#         "exchange_phones_accepted_value", "exchange_difference_total",
#         "phones_purchased_count", "phones_purchased_total_value", "phones_purchased_cash_paid",
#         "cash_received", "card_received", "credit_amount", "debt_amount",
#         "total_expenses", "cash_balance", "total_profit", "cash_calculation_display", "created_at"
#     )
#     search_fields = ("shop__name",)
#
#     def sales_summary(self, obj):
#         return format_html(
#             'Tel: {} (${}) | Aks: {} (${}) | Alm: {} (${})',
#             obj.phones_sold_count, int(obj.phone_sales_total or 0),
#             obj.accessories_sold_count, int(obj.accessory_sales_total or 0),
#             obj.exchanges_count, int(obj.exchange_new_phones_sold_value or 0)
#         )
#
#     sales_summary.short_description = "Sotuvlar"
#
#     def payment_summary(self, obj):
#         return format_html(
#             'Naqd: <span style="color: green;">${}</span> | '
#             'Karta: <span style="color: blue;">${}</span> | '
#             'Nasiya: <span style="color: orange;">${}</span> | '
#             'Qarz: <span style="color: red;">${}</span>',
#             int(obj.cash_received or 0), int(obj.card_received or 0),
#             int(obj.credit_amount or 0), int(obj.debt_amount or 0)
#         )
#
#     payment_summary.short_description = "To'lovlar"
#
#     def cash_balance_display(self, obj):
#         color = "green" if (obj.cash_balance or 0) >= 0 else "red"
#         return format_html('<span style="color: {}; font-weight: bold;">${}</span>', color, int(obj.cash_balance or 0))
#
#     cash_balance_display.short_description = "Kassada"
#
#     def total_income(self, obj):
#         total = (obj.cash_received or 0) + (obj.card_received or 0) + (obj.credit_amount or 0) + (obj.debt_amount or 0)
#         return format_html('<span style="color: blue;">${}</span>', int(total))
#
#     total_income.short_description = "Umumiy users"
#
#     def total_expenses_display(self, obj):
#         return format_html('<span style="color: red;">${}</span>', int(obj.total_expenses or 0))
#
#     total_expenses_display.short_description = "Xarajatlar"
#
#     actions = ['refresh_reports']
#
#     def refresh_reports(self, request, queryset):
#         for report in queryset:
#             report.update_from_daily_data()
#             report.save()
#         self.message_user(request, f"{queryset.count()} ta kunlik hisobot yangilandi")
#
#     refresh_reports.short_description = "Hisobotlarni yangilash"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('shop')
#
#
# @admin.register(MonthlyReport)
# class MonthlyReportAdmin(admin.ModelAdmin):
#     list_display = (
#         "shop",
#         "report_month",
#         "sales_summary",
#         "payment_summary",
#         "cash_balance_display",
#         "total_income",
#         "total_expenses_display",
#         "created_at"
#     )
#     list_filter = ("shop", "report_month")
#     readonly_fields = (
#         "phones_sold_count", "phones_sold_total_value", "phones_sold_profit",
#         "accessories_sold_count", "accessories_sold_total_value", "accessories_sold_profit",
#         "exchanges_count", "exchange_difference_total",
#         "phones_purchased_count", "phones_purchased_total_value",
#         "cash_received", "card_received", "credit_amount", "debt_amount",
#         "total_expenses", "master_services_count", "master_services_total", "master_services_paid",
#         "debts_given", "debts_received", "total_revenue", "total_profit", "net_cash_flow", "created_at"
#     )
#     search_fields = ("shop__name",)
#
#     def sales_summary(self, obj):
#         return format_html(
#             'Tel: {} (${}) | Aks: {} (${}) | Alm: {} (${})',
#             obj.phones_sold_count, int(obj.phones_sold_total_value or 0),
#             obj.accessories_sold_count, int(obj.accessories_sold_total_value or 0),
#             obj.exchanges_count, int(obj.exchange_difference_total or 0)
#         )
#
#     sales_summary.short_description = "Sotuvlar"
#
#     def payment_summary(self, obj):
#         return format_html(
#             'Naqd: <span style="color: green;">${}</span> | '
#             'Karta: <span style="color: blue;">${}</span> | '
#             'Nasiya: <span style="color: orange;">${}</span> | '
#             'Qarz: <span style="color: red;">${}</span>',
#             int(obj.cash_received or 0), int(obj.card_received or 0),
#             int(obj.credit_amount or 0), int(obj.debt_amount or 0)
#         )
#
#     payment_summary.short_description = "To'lovlar"
#
#     def cash_balance_display(self, obj):
#         color = "green" if (obj.net_cash_flow or 0) >= 0 else "red"
#         return format_html('<span style="color: {}; font-weight: bold;">${}</span>', color, int(obj.net_cash_flow or 0))
#
#     cash_balance_display.short_description = "Sof naqd oqim"
#
#     def total_income(self, obj):
#         total = (obj.cash_received or 0) + (obj.card_received or 0) + (obj.credit_amount or 0) + (obj.debt_amount or 0)
#         return format_html('<span style="color: blue;">${}</span>', int(total))
#
#     total_income.short_description = "Umumiy users"
#
#     def total_expenses_display(self, obj):
#         return format_html('<span style="color: red;">${}</span>', int(obj.total_expenses or 0))
#
#     total_expenses_display.short_description = "Xarajatlar"
#
#     actions = ['refresh_reports', 'export_to_csv']
#
#     def refresh_reports(self, request, queryset):
#         for report in queryset:
#             report.update_from_monthly_data()
#             report.save()
#         self.message_user(request, f"{queryset.count()} ta oylik hisobot yangilandi")
#
#     refresh_reports.short_description = "Hisobotlarni yangilash"
#
#     def export_to_csv(self, request, queryset):
#         import csv
#         from django.http import HttpResponse
#         response = HttpResponse(content_type='text/csv')
#         response['Content-Disposition'] = 'attachment; filename="monthly_reports.csv"'
#         writer = csv.writer(response)
#         writer.writerow([
#             'Do\'kon', 'Hisobot oyi', 'Telefon sotuvlari soni', 'Telefon sotuvlari summasi',
#             'Telefon foydasi', 'Aksessuar sotuvlari soni', 'Aksessuar sotuvlari summasi', 'Aksessuar foydasi',
#             'Almashtirishlar soni', 'Almashtirish summasi',
#             'Xarid qilingan telefonlar soni', 'Xarid summasi', 'Naqd', 'Karta',
#             'Nasiya savdo', 'Qarz savdo', 'Xarajatlar', 'Umumiy foyda', 'Sof naqd oqim'
#         ])
#         for report in queryset:
#             writer.writerow([
#                 report.shop.name,
#                 report.report_month.strftime('%Y-%m'),
#                 report.phones_sold_count, report.phones_sold_total_value, report.phones_sold_profit,
#                 report.accessories_sold_count, report.accessories_sold_total_value, report.accessories_sold_profit,
#                 report.exchanges_count, report.exchange_difference_total,
#                 report.phones_purchased_count, report.phones_purchased_total_value,
#                 report.cash_received, report.card_received, report.credit_amount, report.debt_amount,
#                 report.total_expenses, report.total_profit, report.net_cash_flow
#             ])
#         return response
#
#     export_to_csv.short_description = "CSV ga eksport qilish"
#
#     def get_queryset(self, request):
#         return super().get_queryset(request).select_related('shop')
#
#
# # Admin sozlamalari
# admin.site.site_header = "iPhone Do'kon Tizimi"
# admin.site.site_title = "iPhone Admin"
# admin.site.index_title = "Boshqaruv Paneli"




# def get_hello(ism):
#     return f"Assalomu alaykum, {ism}"
#
# def summa(x, y):
#     return x + y
#
# get_salom=lambda ism: f"Assalomu alaykum, {ism}"
#
# print(get_salom("Ali"))
#
# qoshish = lambda x, y: x + y
#
# print(qoshish(2, 3))
#
# kv_son = lambda x, y: x**y
#
# print(kv_son(2, 3))
#
#
# def salom_ber(*args):
#     for ism in args:
#         print(f"Salom {ism}")
#
#
# salom_ber("Anvar", "Bobur", "Mardon")
#
#
# def get_info(**kwargs):
#     natija = "Xodimlar Haqida Ma'lumot"
#     for k, v in kwargs.items():
#         natija += f" {k}: {v}"
#     return natija
#
#
# print(get_info(ism="Anvar", yosh=23))


import random

print(random.randint(1, 10))
print(random.random())

