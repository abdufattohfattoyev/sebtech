from django.test import TestCase
from django.contrib.auth.models import User
from django.utils import timezone
from decimal import Decimal
from datetime import date, timedelta

from inventory.models import (
    Phone, Accessory, PhoneModel, MemorySize,
    Supplier, ExternalSeller, DailySeller,
    AccessoryPurchaseHistory
)
from shops.models import Shop
from users.models import UserProfile


class PhoneDateTestCase(TestCase):
    """Telefon sanasi test qilish"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass123')
        self.profile, _ = UserProfile.objects.get_or_create(user=self.user, defaults={'role': 'boss'})
        self.shop = Shop.objects.create(name='Test Shop', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15')
        self.memory_size = MemorySize.objects.create(size='256GB')
        self.supplier = Supplier.objects.create(name='Test Supplier', phone_number='+998901234567')
        self.test_date = date(2025, 1, 15)

    def test_01_phone_create_with_date(self):
        """TEST 1: Telefon yaratish va sana saqlanishi"""
        phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='123456789012345',
            purchase_price=Decimal('800.00'),
            created_at=self.test_date,
            created_by=self.user,
            supplier=self.supplier,
            source_type='supplier'
        )

        self.assertEqual(phone.created_at, self.test_date)
        self.assertEqual(phone.cost_price, Decimal('800.00'))
        print(f"\n✅ TEST 1: Sana: {phone.created_at}, Cost: {phone.cost_price}")

    def test_02_phone_update_preserves_date(self):
        """TEST 2: Yangilashda sana saqlanishi"""
        phone = Phone.objects.create(
            shop=self.shop,
            phone_model=self.phone_model,
            memory_size=self.memory_size,
            imei='123456789012346',
            purchase_price=Decimal('800.00'),
            created_at=self.test_date,
            created_by=self.user,
            supplier=self.supplier,
            source_type='supplier'
        )

        original_date = phone.created_at
        phone.purchase_price = Decimal('850.00')
        phone.save()
        phone.refresh_from_db()

        self.assertEqual(phone.created_at, original_date)
        print(f"\n✅ TEST 2: Sana o'zgarmadi: {phone.created_at == original_date}")

    def test_03_phone_different_sources(self):
        """TEST 3: Turli manba turlari"""
        external_seller = ExternalSeller.objects.create(
            name='Test Diler',
            phone_number='+998907654321',
            created_by=self.user
        )

        sources = [
            {'source_type': 'supplier', 'supplier': self.supplier, 'imei': '111111111111111'},
            {'source_type': 'external_seller', 'external_seller': external_seller, 'imei': '222222222222222'},
        ]

        for i, data in enumerate(sources, 1):
            test_date = self.test_date + timedelta(days=i)
            phone = Phone.objects.create(
                shop=self.shop,
                phone_model=self.phone_model,
                memory_size=self.memory_size,
                purchase_price=Decimal('800.00'),
                created_at=test_date,
                created_by=self.user,
                **data
            )
            self.assertEqual(phone.created_at, test_date)

        print(f"\n✅ TEST 3: Turli manbalar ishladi")

    def test_04_phone_bulk_create(self):
        """TEST 4: Bulk create - cost_price qo'lda hisoblash"""
        phones = []
        for i in range(5):
            test_date = self.test_date + timedelta(days=i)
            purchase_price = Decimal('800.00')
            imei_cost = Decimal('10.00')
            repair_cost = Decimal('20.00')

            phones.append(Phone(
                shop=self.shop,
                phone_model=self.phone_model,
                memory_size=self.memory_size,
                imei=f'33333333333{i:04d}',
                purchase_price=purchase_price,
                imei_cost=imei_cost,
                repair_cost=repair_cost,
                cost_price=purchase_price + imei_cost + repair_cost,  # Qo'lda hisoblash
                created_at=test_date,
                created_by=self.user,
                supplier=self.supplier,
                source_type='supplier'
            ))

        Phone.objects.bulk_create(phones)

        created_phones = Phone.objects.filter(imei__startswith='33333333333').order_by('created_at')
        self.assertEqual(created_phones.count(), 5)

        for i, phone in enumerate(created_phones):
            expected_date = self.test_date + timedelta(days=i)
            self.assertEqual(phone.created_at, expected_date)
            self.assertEqual(phone.cost_price, Decimal('830.00'))

        print(f"\n✅ TEST 4: Bulk create - 5 ta telefon yaratildi")

    def test_05_phone_filter_by_date(self):
        """TEST 5: Sana bo'yicha filter"""
        for i in range(3):
            Phone.objects.create(
                shop=self.shop,
                phone_model=self.phone_model,
                memory_size=self.memory_size,
                imei=f'44444444444{i:04d}',
                purchase_price=Decimal('800.00'),
                created_at=self.test_date + timedelta(days=i),
                created_by=self.user,
                supplier=self.supplier,
                source_type='supplier'
            )

        count = Phone.objects.filter(created_at=self.test_date).count()
        self.assertEqual(count, 1)
        print(f"\n✅ TEST 5: Filter topdi: {count}")

    def test_06_phone_date_range(self):
        """TEST 6: Sana oralig'i"""
        start = self.test_date
        end = self.test_date + timedelta(days=5)

        for i in range(6):
            Phone.objects.create(
                shop=self.shop,
                phone_model=self.phone_model,
                memory_size=self.memory_size,
                imei=f'55555555555{i:04d}',
                purchase_price=Decimal('800.00'),
                created_at=start + timedelta(days=i),
                created_by=self.user,
                supplier=self.supplier,
                source_type='supplier'
            )

        count = Phone.objects.filter(created_at__gte=start, created_at__lte=end).count()
        self.assertEqual(count, 6)
        print(f"\n✅ TEST 6: Oraliqda: {count}")

    def test_07_phone_ordering_by_date(self):
        """TEST 7: Sana bo'yicha tartiblash"""
        dates = [
            self.test_date + timedelta(days=5),
            self.test_date + timedelta(days=2),
            self.test_date + timedelta(days=8),
        ]

        for i, test_date in enumerate(dates):
            Phone.objects.create(
                shop=self.shop,
                phone_model=self.phone_model,
                memory_size=self.memory_size,
                imei=f'66666666666{i:04d}',
                purchase_price=Decimal('800.00'),
                created_at=test_date,
                created_by=self.user,
                supplier=self.supplier,
                source_type='supplier'
            )

        oldest = Phone.objects.filter(imei__startswith='66666666666').order_by('created_at').first()
        newest = Phone.objects.filter(imei__startswith='66666666666').order_by('-created_at').first()

        self.assertEqual(oldest.created_at, self.test_date + timedelta(days=2))
        self.assertEqual(newest.created_at, self.test_date + timedelta(days=8))
        print(f"\n✅ TEST 7: Tartiblash to'g'ri")


class AccessoryDateTestCase(TestCase):
    """Aksessuar sanasi test"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser2', password='testpass123')
        UserProfile.objects.get_or_create(user=self.user, defaults={'role': 'boss'})
        self.shop = Shop.objects.create(name='Test Shop 2', owner=self.user)
        self.supplier = Supplier.objects.create(name='Test Supplier 2', phone_number='+998901234568')

    def test_08_accessory_create(self):
        """TEST 8: Aksessuar yaratish"""
        accessory = Accessory.objects.create(
            shop=self.shop,
            name='Test Accessory',
            code='0001',
            sale_price=Decimal('50000'),
            supplier=self.supplier,
            created_by=self.user
        )

        self.assertIsNotNone(accessory.created_at)
        actual_date = accessory.created_at.date() if hasattr(accessory.created_at, 'date') else accessory.created_at
        self.assertEqual(actual_date, timezone.now().date())
        print(f"\n✅ TEST 8: Aksessuar sanasi: {accessory.created_at}")

    def test_09_accessory_history(self):
        """TEST 9: History sanasi"""
        accessory = Accessory.objects.create(
            shop=self.shop,
            name='Test Accessory 2',
            code='0002',
            sale_price=Decimal('50000'),
            supplier=self.supplier,
            created_by=self.user
        )

        history = AccessoryPurchaseHistory.objects.create(
            accessory=accessory,
            quantity=10,
            purchase_price=Decimal('30000'),
            created_by=self.user
        )

        self.assertIsNotNone(history.created_at)
        print(f"\n✅ TEST 9: History sanasi: {history.created_at}")


class SellerDateTestCase(TestCase):
    """Seller sana testlari"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser3', password='testpass123')

    def test_10_supplier_date(self):
        """TEST 10: Supplier"""
        supplier = Supplier.objects.create(name='Test Supplier 3', phone_number='+998901234569')
        self.assertIsNotNone(supplier.created_at)
        print(f"\n✅ TEST 10: Supplier: {supplier.created_at}")

    def test_11_external_seller_date(self):
        """TEST 11: ExternalSeller"""
        seller = ExternalSeller.objects.create(
            name='Test Diler 2',
            phone_number='+998907654322',
            created_by=self.user
        )
        self.assertIsNotNone(seller.created_at)
        print(f"\n✅ TEST 11: ExternalSeller: {seller.created_at}")

    def test_12_daily_seller_date(self):
        """TEST 12: DailySeller"""
        seller = DailySeller.objects.create(
            name='Test Daily 2',
            phone_number='+998909876544',
            created_by=self.user
        )
        self.assertIsNotNone(seller.created_at)
        print(f"\n✅ TEST 12: DailySeller: {seller.created_at}")


class PhoneFormTestCase(TestCase):
    """Form test"""

    def setUp(self):
        self.user = User.objects.create_user(username='testuser4', password='testpass123')
        UserProfile.objects.get_or_create(user=self.user, defaults={'role': 'boss'})
        self.shop = Shop.objects.create(name='Test Shop 4', owner=self.user)
        self.phone_model = PhoneModel.objects.create(model_name='iPhone 15 Pro')
        self.memory_size = MemorySize.objects.create(size='512GB')
        self.supplier = Supplier.objects.create(name='Test Supplier 4', phone_number='+998901234570')

    def test_13_form_date_required(self):
        """TEST 13: Sana majburiy"""
        from inventory.forms import PhoneForm

        form = PhoneForm(data={
            'shop': self.shop.id,
            'phone_model': self.phone_model.id,
            'memory_size': self.memory_size.id,
            'imei': '999999999999999',
            'purchase_price': '800.00',
            'imei_cost': '0',
            'repair_cost': '0',
            'supplier': self.supplier.id,
            'source_type': 'supplier',
            'status': 'shop',
            'condition_percentage': 100,
        }, user=self.user)

        self.assertFalse(form.is_valid())
        self.assertIn('created_at', form.errors)
        print(f"\n✅ TEST 13: Sana majburiy")

    def test_14_form_date_valid(self):
        """TEST 14: To'g'ri sana"""
        from inventory.forms import PhoneForm

        test_date = date(2025, 1, 20)

        form_data = {
            'shop': self.shop.id,
            'phone_model': self.phone_model.id,
            'memory_size': self.memory_size.id,
            'imei': '999999999999998',
            'purchase_price': '800.00',
            'imei_cost': '0',
            'repair_cost': '0',
            'supplier': self.supplier.id,
            'source_type': 'supplier',
            'status': 'shop',
            'condition_percentage': 100,
            'created_at': test_date,  # Date obyekti
        }

        form = PhoneForm(data=form_data, user=self.user)

        if not form.is_valid():
            print(f"\n❌ TEST 14 XATO - Form errors:")
            for field, errors in form.errors.items():
                print(f"   {field}: {errors}")

        self.assertTrue(form.is_valid(), f"Form invalid: {form.errors}")

        phone = form.save(commit=False)
        phone.created_by = self.user
        phone.save()

        self.assertEqual(phone.created_at, test_date)
        print(f"\n✅ TEST 14: Form to'g'ri: {phone.created_at}")