# inventory/admin.py - TO'G'RILANGAN

from django.contrib import admin
from django.utils.html import format_html
from django.db.models import Sum, Count, Q
from django import forms
from .models import Supplier, PhoneModel, MemorySize, Accessory, Phone  # O'ZGARTIRILDI


class DateInput(forms.DateInput):
    input_type = 'date'


@admin.register(Supplier)
class SupplierAdmin(admin.ModelAdmin):
    list_display = ('name', 'phone_number', 'phones_count', 'accessories_count', 'created_at')
    search_fields = ('name', 'phone_number')
    list_filter = ('created_at',)
    readonly_fields = ('created_at',)

    def phones_count(self, obj):
        count = obj.phone_set.count()
        return format_html('<span style="color: blue;">{}</span>', count)

    phones_count.short_description = "Telefonlar soni"

    def accessories_count(self, obj):
        count = obj.accessory_set.count()
        return format_html('<span style="color: green;">{}</span>', count)

    accessories_count.short_description = "Aksessuarlar soni"




@admin.register(PhoneModel)
class PhoneModelAdmin(admin.ModelAdmin):
    list_display = ('model_name', 'phones_count', 'created_at')
    search_fields = ('model_name',)
    list_filter = ('created_at',)
    readonly_fields = ('created_at',)

    def phones_count(self, obj):
        count = obj.phone_set.count()
        return format_html('<span style="color: blue;">{}</span>', count)

    phones_count.short_description = "Telefonlar soni"


@admin.register(MemorySize)
class MemorySizeAdmin(admin.ModelAdmin):
    list_display = ('size', 'phones_count', 'created_at')
    search_fields = ('size',)
    list_filter = ('created_at',)
    readonly_fields = ('created_at',)

    def phones_count(self, obj):
        count = obj.phone_set.count()
        return format_html('<span style="color: blue;">{}</span>', count)

    phones_count.short_description = "Telefonlar soni"


@admin.register(Accessory)
class AccessoryAdmin(admin.ModelAdmin):
    list_display = (
        'name', 'code', 'shop', 'quantity_display', 'price_display',
        'profit_display', 'supplier', 'created_at'
    )
    list_filter = ('shop', 'supplier', 'created_at', 'created_by')
    search_fields = ('name', 'code', 'supplier__name')
    readonly_fields = ('created_at',)

    fields = (
        'shop', 'name', 'code', 'image',
        'purchase_price', 'sale_price', 'quantity',
        'supplier', 'created_by', 'created_at'
    )

    def quantity_display(self, obj):
        color = 'red' if obj.quantity == 0 else ('orange' if obj.quantity < 10 else 'green')
        return format_html('<span style="color: {}; font-weight: bold;">{}</span>', color, obj.quantity)

    quantity_display.short_description = "Soni"

    def price_display(self, obj):
        return format_html(
            'Tan: <span style="color: red;">{:,.0f} so\'m</span> | '  # O'ZGARTIRILDI: SO'M formatda
            'Sotish: <span style="color: green;">{:,.0f} so\'m</span>',
            obj.purchase_price, obj.sale_price
        )

    price_display.short_description = "Narxlar"

    def profit_display(self, obj):
        profit = obj.sale_price - obj.purchase_price
        color = 'green' if profit >= 0 else 'red'
        return format_html('<span style="color: {};">{:,.0f} so\'m</span>', color, profit)  # O'ZGARTIRILDI

    profit_display.short_description = "Foyda (1 dona)"

    def get_queryset(self, request):
        return super().get_queryset(request).select_related('shop', 'supplier', 'created_by')


@admin.register(Phone)
class PhoneAdmin(admin.ModelAdmin):
    list_display = (
        'phone_model', 'memory_size', 'imei_short', 'condition_percentage',
        'status_display', 'source_display', 'price_display', 'actual_profit_display', 'shop', 'created_at'
    )
    list_filter = (
        'status', 'shop', 'phone_model', 'memory_size', 'source_type',
        'condition_percentage', 'created_at', 'supplier', 'external_seller'  # O'ZGARTIRILDI
    )
    search_fields = ('imei', 'phone_model__model_name', 'supplier__name', 'external_seller__name')  # O'ZGARTIRILDI
    readonly_fields = ('created_at', 'cost_price')

    fieldsets = (
        ('Asosiy ma\'lumotlar', {
            'fields': (
                'shop', 'phone_model', 'memory_size', 'imei',
                'condition_percentage', 'status', 'image'
            )
        }),
        ('Narx ma\'lumotlari', {
            'fields': (
                'purchase_price', 'imei_cost', 'repair_cost',
                'cost_price', 'sale_price'
            )
        }),
        ('Manba ma\'lumotlari', {
            'fields': (
                'source_type', 'supplier', 'external_seller', 'exchange_value'  # O'ZGARTIRILDI
            )
        }),
        ('Asl egasi ma\'lumotlari', {
            'fields': ('original_owner_name', 'original_owner_phone'),
            'classes': ('collapse',)
        }),
        ('Qo\'shimcha', {
            'fields': ('created_by', 'created_at'),
            'classes': ('collapse',)
        })
    )

    def imei_short(self, obj):
        if obj.imei:
            return obj.imei[:8] + '...' if len(obj.imei) > 8 else obj.imei
        return 'N/A'

    imei_short.short_description = "IMEI"

    def status_display(self, obj):
        colors = {
            'shop': '#28a745',
            'master': '#ffc107',
            'sold': '#17a2b8',
            'returned': '#dc3545',
            'exchanged_in': '#6f42c1'
        }
        color = colors.get(obj.status, '#6c757d')
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color, obj.get_status_display()
        )

    status_display.short_description = "Holati"

    def source_display(self, obj):
        if obj.source_type == 'supplier' and obj.supplier:
            return format_html('<span style="color: blue;">ðŸ“¦ Taminotchi: {}</span>', obj.supplier.name)
        elif obj.source_type == 'external_seller' and obj.external_seller:  # O'ZGARTIRILDI
            return format_html('<span style="color: green;">ðŸ‘¤ Tashqi sotuvchi: {}</span>', obj.external_seller.name)
        elif obj.source_type == 'exchange':
            return format_html('<span style="color: purple;">ðŸ”„ Almashtirish</span>')
        return obj.get_source_type_display()

    source_display.short_description = "Manba"

    def price_display(self, obj):
        sale_price_display = f'${obj.sale_price}' if obj.sale_price is not None else 'N/A'
        return format_html(
            'Tan: <span style="color: red;">${}</span><br>'
            'Taklif: <span style="color: orange;">{}</span>',
            obj.cost_price, sale_price_display
        )

    price_display.short_description = "Narxlar"

    def actual_profit_display(self, obj):
        """Haqiqiy foyda â€” faqat sotilgan telefonlar uchun haqiqiy sotish narxi bilan"""
        if obj.status == 'sold':
            try:
                if hasattr(obj, 'phonesale'):
                    sale = obj.phonesale
                    profit = sale.sale_price - obj.cost_price
                    color = 'green' if profit >= 0 else 'red'
                    sign = "+" if profit >= 0 else ""

                    return format_html(
                        '<span style="color: {}; font-weight: bold;">{}{}</span><br>'
                        '<small style="color: #666;">Sotish: {} - Tan: {}</small>',
                        color, sign,
                        f"${profit:.2f}",
                        f"${sale.sale_price:.2f}",
                        f"${obj.cost_price:.2f}",
                    )
                else:
                    exchanges = obj.exchanges_as_new.all()
                    if exchanges.exists():
                        exchange = exchanges.first()
                        profit = exchange.new_phone_price - obj.cost_price
                        color = 'green' if profit >= 0 else 'red'
                        sign = "+" if profit >= 0 else ""

                        return format_html(
                            '<span style="color: {}; font-weight: bold;">{}{}</span><br>'
                            '<small style="color: #666;">Almashuv: {} - Tan: {}</small>',
                            color, sign,
                            f"${profit:.2f}",
                            f"${exchange.new_phone_price:.2f}",
                            f"${obj.cost_price:.2f}",
                        )
            except Exception as e:
                return format_html('<span style="color: red;">Xatolik: {}</span>', str(e)[:50])

        elif obj.status == 'returned':
            try:
                if hasattr(obj, 'phonesale') and hasattr(obj.phonesale, 'phone_return'):
                    phone_return = obj.phonesale.phone_return
                    original_profit = obj.phonesale.sale_price - obj.cost_price
                    final_profit = original_profit - phone_return.return_amount

                    color = 'red' if final_profit < 0 else ('orange' if final_profit < original_profit else 'green')
                    sign = "+" if final_profit >= 0 else ""

                    return format_html(
                        '<span style="color: {}; font-weight: bold;">{}{}</span><br>'
                        '<small style="color: #666;">Qaytarish: -{}</small>',
                        color, sign,
                        f"${final_profit:.2f}",
                        f"${phone_return.return_amount:.2f}",
                    )
            except Exception as e:
                return format_html('<span style="color: red;">Qaytarish xatolik: {}</span>', str(e)[:50])

        return format_html('<span style="color: #6c757d; font-style: italic;">Sotilmagan</span>')

    actual_profit_display.short_description = "Haqiqiy Foyda"
    actual_profit_display.admin_order_field = 'phonesale__sale_price'

    def get_queryset(self, request):
        return super().get_queryset(request).select_related(
            'shop', 'phone_model', 'memory_size', 'supplier', 'external_seller', 'created_by'  # O'ZGARTIRILDI
        ).prefetch_related('phonesale', 'exchanges_as_new')

    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)

        # Source type'ga qarab fieldlarni yashirish/ko'rsatish
        if obj:
            if obj.source_type == 'supplier':
                form.base_fields['external_seller'].widget.attrs['style'] = 'display:none;'  # O'ZGARTIRILDI
                form.base_fields['exchange_value'].widget.attrs['style'] = 'display:none;'
            elif obj.source_type == 'external_seller':  # O'ZGARTIRILDI
                form.base_fields['supplier'].widget.attrs['style'] = 'display:none;'
                form.base_fields['exchange_value'].widget.attrs['style'] = 'display:none;'
            elif obj.source_type == 'exchange':
                form.base_fields['supplier'].widget.attrs['style'] = 'display:none;'
                form.base_fields['external_seller'].widget.attrs['style'] = 'display:none;'  # O'ZGARTIRILDI

        return form

    # Custom actions
    actions = ['mark_as_shop', 'mark_as_master', 'calculate_total_value']

    def mark_as_shop(self, request, queryset):
        updated = queryset.update(status='shop')
        self.message_user(request, f'{updated} ta telefon "Do\'konda" holatiga o\'tkazildi.')

    mark_as_shop.short_description = "Do'konda holatiga o'tkazish"

    def mark_as_master(self, request, queryset):
        updated = queryset.update(status='master')
        self.message_user(request, f'{updated} ta telefon "Ustada" holatiga o\'tkazildi.')

    mark_as_master.short_description = "Ustada holatiga o'tkazish"

    def calculate_total_value(self, request, queryset):
        total_cost = queryset.aggregate(Sum('cost_price'))['cost_price__sum'] or 0
        total_sale = queryset.filter(sale_price__isnull=False).aggregate(
            Sum('sale_price'))['sale_price__sum'] or 0

        self.message_user(
            request,
            f'Tanlangan telefonlar: Umumiy tan narx: ${total_cost}, '
            f'Umumiy taklif narxi: ${total_sale}, '
            f'Potensial foyda: ${total_sale - total_cost}'
        )

    calculate_total_value.short_description = "Umumiy qiymatni hisoblash"

    # Custom filters
    class StatusFilter(admin.SimpleListFilter):
        title = 'Status guruhi'
        parameter_name = 'status_group'

        def lookups(self, request, model_admin):
            return (
                ('available', 'Mavjud (Do\'konda + Ustada)'),
                ('sold_returned', 'Sotilgan/Qaytarilgan'),
            )

        def queryset(self, request, queryset):
            if self.value() == 'available':
                return queryset.filter(status__in=['shop', 'master'])
            if self.value() == 'sold_returned':
                return queryset.filter(status__in=['sold', 'returned'])
            return queryset

    list_filter = list_filter + (StatusFilter,)

    def changeform_view(self, request, object_id=None, form_url='', extra_context=None):
        extra_context = extra_context or {}

        if object_id:
            obj = self.get_object(request, object_id)
            if obj:
                extra_context['phone_history'] = self.get_phone_history(obj)

        return super().changeform_view(request, object_id, form_url, extra_context)

    def get_phone_history(self, phone):
        """Telefon tarixi: Yaratilish, Sotish, Qaytarish"""
        history = []

        history.append({
            'date': phone.created_at,
            'action': f'Telefon yaratildi ({phone.get_source_type_display()})',
            'user': phone.created_by.username if phone.created_by else 'N/A'
        })

        from sales.models import PhoneSale, PhoneReturn

        try:
            sale = PhoneSale.objects.get(phone=phone)
            history.append({
                'date': sale.sale_date,
                'action': f'Sotildi: ${sale.sale_price} (Naqd: ${sale.cash_amount}, Karta: ${sale.card_amount}, Nasiya: ${sale.credit_amount}, Qarz: ${sale.debt_amount})',
                'user': sale.salesman.username if sale.salesman else 'N/A'
            })

            try:
                return_obj = PhoneReturn.objects.get(phone_sale=sale)
                history.append({
                    'date': return_obj.return_date,
                    'action': f'Qaytarildi: ${return_obj.return_amount} (Sabab: {return_obj.reason[:30]}...)',
                    'user': return_obj.created_by.username if return_obj.created_by else 'N/A'
                })
            except PhoneReturn.DoesNotExist:
                pass

        except PhoneSale.DoesNotExist:
            pass

        return sorted(history, key=lambda x: x['date'], reverse=True)