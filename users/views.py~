from django.contrib.auth import logout
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.contrib.auth.models import User
from django.db import transaction
from django.db.models import Q
from django.utils import timezone
from decimal import Decimal
import json
from datetime import date
from calendar import monthrange

from .models import UserProfile
from .forms import UserRegistrationForm, UserProfileForm, UserEditForm
from reports.models import ReportCalculator
from shops.models import Shop
from reports.views import is_boss_or_finance


@login_required
def logout_view(request):
    """Custom logout view"""
    if request.method == 'POST':
        logout(request)
        messages.success(request, "âœ… Tizimdan muvaffaqiyatli chiqdingiz!")
        return redirect('login')
    return render(request, 'registration/logout.html')


def is_boss(user):
    """Rahbar ekanligini tekshirish"""
    try:
        return user.userprofile.role == 'boss'
    except:
        return False


@login_required
def dashboard(request):
    """
    Dashboard - foydalanuvchi turiga qarab ko'rsatish:
    - Boss/Finance: barcha sotuvchilar ro'yxati
    - Sotuvchi: o'zining to'liq statistikasi
    """
    profile = UserProfile.objects.get_or_create(user=request.user)[0]

    # Boss uchun - ro'yxat ko'rinishi
    if is_boss(request.user):
        users = UserProfile.objects.select_related('user').all()

        # Filter
        role_filter = request.GET.get('role')
        if role_filter:
            users = users.filter(role=role_filter)

        # Search
        search = request.GET.get('search')
        if search:
            users = users.filter(
                Q(user__username__icontains=search) |
                Q(user__first_name__icontains=search) |
                Q(user__last_name__icontains=search) |
                Q(phone_number__icontains=search)
            )

        # Pagination
        paginator = Paginator(users, 15)
        page_obj = paginator.get_page(request.GET.get('page', 1))

        # Statistics
        stats = {
            'total': UserProfile.objects.count(),
            'active': UserProfile.objects.filter(user__is_active=True).count(),
            'seller': UserProfile.objects.filter(role='seller').count(),
            'boss': UserProfile.objects.filter(role='boss').count(),
        }

        return render(request, 'users/dashboard_list.html', {
            'page_obj': page_obj,
            'stats': stats,
            'is_boss': True,
            'profile': profile,
            'role_choices': UserProfile.ROLE_CHOICES,
        })

    # Sotuvchi uchun - to'liq statistika
    else:
        shops = Shop.objects.all()
        if not shops.exists():
            return render(request, 'users/dashboard_seller.html', {
                'profile': profile,
                'no_shop': True
            })

        selected_shop = shops.first()

        # Oy va yil parametrlarini olish
        current_year = int(request.GET.get('year', timezone.now().year))
        current_month = int(request.GET.get('month', timezone.now().month))

        calculator = ReportCalculator(selected_shop)

        # OYLIK MA'LUMOT
        monthly_data = calculator.get_seller_monthly_salary(request.user, current_year, current_month)

        # YILLIK MA'LUMOT
        yearly_phone_count = 0
        yearly_accessory_count = 0
        yearly_exchange_count = 0
        yearly_returns_count = 0
        yearly_salary_usd = Decimal('0')
        yearly_salary_uzs = Decimal('0')

        monthly_phone_data = []
        monthly_accessory_data = []
        monthly_phone_profit_data = []  # Yangi: oylik telefon foydasi
        monthly_accessory_profit_data = []  # Yangi: oylik aksessuar foydasi

        for month in range(1, 13):
            try:
                month_salary = calculator.get_seller_monthly_salary(request.user, current_year, month)
                yearly_phone_count += month_salary['sales']['phone_count']
                yearly_accessory_count += month_salary['sales']['accessory_count']
                yearly_exchange_count += month_salary['sales']['exchange_count']
                yearly_returns_count += month_salary['sales']['returns_count']
                yearly_salary_usd += month_salary['commission']['total_salary_usd']
                yearly_salary_uzs += month_salary['commission']['total_salary_uzs']

                net_phones = month_salary['sales']['phone_count'] + month_salary['sales']['exchange_count']
                monthly_phone_data.append(net_phones)
                monthly_accessory_data.append(month_salary['sales']['accessory_count'])

                # Yangi: Foyda ma'lumotlarini qo'shish
                phone_profit = month_salary['profits']['phone_profit'] + month_salary['profits']['exchange_profit']
                accessory_profit = month_salary['profits']['accessory_profit']
                monthly_phone_profit_data.append(float(phone_profit))  # Decimal ni float ga o'tkazish JSON uchun
                monthly_accessory_profit_data.append(float(accessory_profit))

            except Exception as e:
                # Agar oy ma'lumotlari topilmasa, 0 qo'shamiz
                monthly_phone_data.append(0)
                monthly_accessory_data.append(0)
                monthly_phone_profit_data.append(0.0)
                monthly_accessory_profit_data.append(0.0)

        # KUNLIK MA'LUMOT - Tanlangan oy uchun
        _, last_day = monthrange(current_year, current_month)
        daily_phone_data = []
        daily_accessory_data = []
        daily_sales_data = []  # Kunlik sotuvlar jadvali uchun

        for day in range(1, last_day + 1):
            try:
                day_date = date(current_year, current_month, day)
                day_report = calculator.get_seller_daily_report(request.user, day_date)

                # Telefon + Almashtirish = Jami telefon sotuvlar
                total_phones = day_report['counts']['phone'] + day_report['counts']['exchange']
                accessories = day_report['counts']['accessory']

                daily_phone_data.append(total_phones)
                daily_accessory_data.append(accessories)

                # Foydalarni alohida hisoblaymiz
                phone_profit = day_report['profits']['phone_profit'] + day_report['profits']['exchange_profit']
                accessory_profit = day_report['profits']['accessory_profit']
                total_profit = phone_profit + accessory_profit

                # Kunlik sotuvlar jadvali uchun ma'lumot
                daily_sales_data.append({
                    'day': day,
                    'phone_count': total_phones,  # Telefon + Almashtirish
                    'accessory_count': accessories,
                    'total_count': total_phones + accessories,
                    'phone_profit': phone_profit,
                    'accessory_profit': accessory_profit,
                    'total_profit': total_profit
                })
            except Exception as e:
                # Agar kun ma'lumotlari topilmasa, 0 qo'shamiz
                daily_phone_data.append(0)
                daily_accessory_data.append(0)
                daily_sales_data.append({
                    'day': day,
                    'phone_count': 0,
                    'accessory_count': 0,
                    'total_count': 0,
                    'phone_profit': 0,
                    'accessory_profit': 0,
                    'total_profit': 0
                })

        # Jami foydalarni hisoblaymiz
        total_monthly_phone_profit = monthly_data['profits']['phone_profit'] + monthly_data['profits']['exchange_profit']
        total_monthly_profit = total_monthly_phone_profit + monthly_data['profits']['accessory_profit']

        seller_data = {
            'monthly': {
                'phone_count': monthly_data['sales']['phone_count'] + monthly_data['sales']['exchange_count'],
                'accessory_count': monthly_data['sales']['accessory_count'],
                'returns_count': monthly_data['sales']['returns_count'],
                'phone_profit': total_monthly_phone_profit,
                'accessory_profit': monthly_data['profits']['accessory_profit'],
                'total_profit': total_monthly_profit,
                'total_salary_usd': monthly_data['commission']['total_salary_usd'],
                'total_salary_uzs': monthly_data['commission']['total_salary_uzs'],
                'base_salary_usd': monthly_data['commission']['base_salary_usd'],
                'base_salary_uzs': monthly_data['commission']['base_salary_uzs'],
                'phone_commission': monthly_data['commission']['phone_commission'] + monthly_data['commission']['exchange_commission'],
                'accessory_commission': monthly_data['commission']['accessory_commission'],
            },
            'yearly': {
                'phone_count': yearly_phone_count + yearly_exchange_count,
                'accessory_count': yearly_accessory_count,
                'returns_count': yearly_returns_count,
                'total_salary_usd': yearly_salary_usd,
                'total_salary_uzs': yearly_salary_uzs,
            },
            'charts': {
                'daily_phone': json.dumps(daily_phone_data),
                'daily_accessory': json.dumps(daily_accessory_data),
                'monthly_phone': json.dumps(monthly_phone_data),
                'monthly_accessory': json.dumps(monthly_accessory_data),
                'monthly_phone_profit': json.dumps(monthly_phone_profit_data),  # Yangi
                'monthly_accessory_profit': json.dumps(monthly_accessory_profit_data),  # Yangi
            }
        }

        month_names = {
            1: 'Yanvar', 2: 'Fevral', 3: 'Mart', 4: 'Aprel',
            5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avgust',
            9: 'Sentabr', 10: 'Oktabr', 11: 'Noyabr', 12: 'Dekabr'
        }

        # Mavjud yillar ro'yxati
        current_year_now = timezone.now().year
        available_years = list(range(2020, current_year_now + 2))

        return render(request, 'users/dashboard_seller.html', {
            'profile': profile,
            'seller_data': seller_data,
            'daily_sales_data': daily_sales_data,
            'current_year': current_year,
            'current_month': current_month,
            'month_name': month_names.get(current_month),
            'month_names': month_names,
            'available_years': available_years,
            'selected_shop': selected_shop,
        })


@login_required
def seller_statistics(request, pk):
    """Boss uchun sotuvchi statistikasini ko'rish"""
    if not is_boss(request.user):
        messages.error(request, "Sizda bu ma'lumotlarni ko'rish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    seller_profile = get_object_or_404(UserProfile, pk=pk)

    if seller_profile.role != 'seller':
        messages.error(request, "Bu foydalanuvchi sotuvchi emas!")
        return redirect('users:dashboard')

    shops = Shop.objects.all()
    if not shops.exists():
        return render(request, 'users/dashboard_seller.html', {
            'profile': seller_profile,
            'no_shop': True,
            'is_boss_view': True
        })

    selected_shop = shops.first()

    # Oy va yil parametrlarini olish
    current_year = int(request.GET.get('year', timezone.now().year))
    current_month = int(request.GET.get('month', timezone.now().month))

    calculator = ReportCalculator(selected_shop)

    # OYLIK MA'LUMOT
    monthly_data = calculator.get_seller_monthly_salary(seller_profile.user, current_year, current_month)

    # YILLIK MA'LUMOT
    yearly_phone_count = 0
    yearly_accessory_count = 0
    yearly_exchange_count = 0
    yearly_returns_count = 0
    yearly_salary_usd = Decimal('0')
    yearly_salary_uzs = Decimal('0')

    monthly_phone_data = []
    monthly_accessory_data = []
    monthly_phone_profit_data = []  # Yangi: oylik telefon foydasi
    monthly_accessory_profit_data = []  # Yangi: oylik aksessuar foydasi

    for month in range(1, 13):
        try:
            month_salary = calculator.get_seller_monthly_salary(seller_profile.user, current_year, month)
            yearly_phone_count += month_salary['sales']['phone_count']
            yearly_accessory_count += month_salary['sales']['accessory_count']
            yearly_exchange_count += month_salary['sales']['exchange_count']
            yearly_returns_count += month_salary['sales']['returns_count']
            yearly_salary_usd += month_salary['commission']['total_salary_usd']
            yearly_salary_uzs += month_salary['commission']['total_salary_uzs']

            net_phones = month_salary['sales']['phone_count'] + month_salary['sales']['exchange_count']
            monthly_phone_data.append(net_phones)
            monthly_accessory_data.append(month_salary['sales']['accessory_count'])

            # Yangi: Foyda ma'lumotlarini qo'shish
            phone_profit = month_salary['profits']['phone_profit'] + month_salary['profits']['exchange_profit']
            accessory_profit = month_salary['profits']['accessory_profit']
            monthly_phone_profit_data.append(float(phone_profit))  # Decimal ni float ga o'tkazish JSON uchun
            monthly_accessory_profit_data.append(float(accessory_profit))

        except Exception as e:
            # Agar oy ma'lumotlari topilmasa, 0 qo'shamiz
            monthly_phone_data.append(0)
            monthly_accessory_data.append(0)
            monthly_phone_profit_data.append(0.0)
            monthly_accessory_profit_data.append(0.0)

    # KUNLIK MA'LUMOT - Tanlangan oy uchun
    _, last_day = monthrange(current_year, current_month)
    daily_phone_data = []
    daily_accessory_data = []
    daily_sales_data = []  # Kunlik sotuvlar jadvali uchun

    for day in range(1, last_day + 1):
        try:
            day_date = date(current_year, current_month, day)
            day_report = calculator.get_seller_daily_report(seller_profile.user, day_date)

            # Telefon + Almashtirish = Jami telefon sotuvlar
            total_phones = day_report['counts']['phone'] + day_report['counts']['exchange']
            accessories = day_report['counts']['accessory']

            daily_phone_data.append(total_phones)
            daily_accessory_data.append(accessories)

            # Foydalarni alohida hisoblaymiz
            phone_profit = day_report['profits']['phone_profit'] + day_report['profits']['exchange_profit']
            accessory_profit = day_report['profits']['accessory_profit']
            total_profit = phone_profit + accessory_profit

            # Kunlik sotuvlar jadvali uchun ma'lumot
            daily_sales_data.append({
                'day': day,
                'phone_count': total_phones,
                'accessory_count': accessories,
                'total_count': total_phones + accessories,
                'phone_profit': phone_profit,
                'accessory_profit': accessory_profit,
                'total_profit': total_profit
            })
        except Exception as e:
            # Agar kun ma'lumotlari topilmasa, 0 qo'shamiz
            daily_phone_data.append(0)
            daily_accessory_data.append(0)
            daily_sales_data.append({
                'day': day,
                'phone_count': 0,
                'accessory_count': 0,
                'total_count': 0,
                'phone_profit': 0,
                'accessory_profit': 0,
                'total_profit': 0
            })

    # Jami foydalarni hisoblaymiz
    total_monthly_phone_profit = monthly_data['profits']['phone_profit'] + monthly_data['profits']['exchange_profit']
    total_monthly_profit = total_monthly_phone_profit + monthly_data['profits']['accessory_profit']

    seller_data = {
        'monthly': {
            'phone_count': monthly_data['sales']['phone_count'] + monthly_data['sales']['exchange_count'],
            'accessory_count': monthly_data['sales']['accessory_count'],
            'returns_count': monthly_data['sales']['returns_count'],
            'phone_profit': total_monthly_phone_profit,
            'accessory_profit': monthly_data['profits']['accessory_profit'],
            'total_profit': total_monthly_profit,
            'total_salary_usd': monthly_data['commission']['total_salary_usd'],
            'total_salary_uzs': monthly_data['commission']['total_salary_uzs'],
            'base_salary_usd': monthly_data['commission']['base_salary_usd'],
            'base_salary_uzs': monthly_data['commission']['base_salary_uzs'],
            'phone_commission': monthly_data['commission']['phone_commission'] + monthly_data['commission']['exchange_commission'],
            'accessory_commission': monthly_data['commission']['accessory_commission'],
        },
        'yearly': {
            'phone_count': yearly_phone_count + yearly_exchange_count,
            'accessory_count': yearly_accessory_count,
            'returns_count': yearly_returns_count,
            'total_salary_usd': yearly_salary_usd,
            'total_salary_uzs': yearly_salary_uzs,
        },
        'charts': {
            'daily_phone': json.dumps(daily_phone_data),
            'daily_accessory': json.dumps(daily_accessory_data),
            'monthly_phone': json.dumps(monthly_phone_data),
            'monthly_accessory': json.dumps(monthly_accessory_data),
            'monthly_phone_profit': json.dumps(monthly_phone_profit_data),  # Yangi
            'monthly_accessory_profit': json.dumps(monthly_accessory_profit_data),  # Yangi
        }
    }

    month_names = {
        1: 'Yanvar', 2: 'Fevral', 3: 'Mart', 4: 'Aprel',
        5: 'May', 6: 'Iyun', 7: 'Iyul', 8: 'Avgust',
        9: 'Sentabr', 10: 'Oktabr', 11: 'Noyabr', 12: 'Dekabr'
    }

    # Mavjud yillar ro'yxati
    current_year_now = timezone.now().year
    available_years = list(range(2020, current_year_now + 2))

    return render(request, 'users/dashboard_seller.html', {
        'profile': seller_profile,
        'seller_data': seller_data,
        'daily_sales_data': daily_sales_data,
        'current_year': current_year,
        'current_month': current_month,
        'month_name': month_names.get(current_month),
        'month_names': month_names,
        'available_years': available_years,
        'selected_shop': selected_shop,
        'is_boss_view': True,
    })


@login_required
def my_profile(request):
    """O'z profilini tahrirlash"""
    profile, _ = UserProfile.objects.get_or_create(user=request.user)

    if request.method == 'POST':
        user_form = UserEditForm(request.POST, instance=request.user)
        profile_form = UserProfileForm(request.POST, request.FILES, instance=profile)

        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, "Profil muvaffaqiyatli yangilandi!")
            return redirect('users:my_profile')
    else:
        user_form = UserEditForm(instance=request.user)
        profile_form = UserProfileForm(instance=profile)

    return render(request, 'users/user_form.html', {
        'user_form': user_form,
        'profile_form': profile_form,
        'profile': profile,
        'title': "Mening Profilim",
        'submit_text': "Saqlash",
    })


@login_required
def user_create(request):
    """Yangi foydalanuvchi yaratish - faqat rahbar"""
    if not is_boss(request.user):
        messages.error(request, "Sizda bu amalni bajarish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    if request.method == 'POST':
        user_form = UserRegistrationForm(request.POST)
        profile_form = UserProfileForm(request.POST, request.FILES)

        if user_form.is_valid() and profile_form.is_valid():
            try:
                with transaction.atomic():
                    user = user_form.save()
                    profile, created = UserProfile.objects.get_or_create(user=user)
                    profile.role = profile_form.cleaned_data['role']
                    profile.phone_number = profile_form.cleaned_data.get('phone_number')
                    profile.base_salary_usd = profile_form.cleaned_data.get('base_salary_usd', 0)
                    profile.base_salary_uzs = profile_form.cleaned_data.get('base_salary_uzs', 0)
                    profile.phone_commission_percent = profile_form.cleaned_data.get('phone_commission_percent', 5.00)
                    profile.accessory_commission_percent = profile_form.cleaned_data.get('accessory_commission_percent', 10.00)
                    profile.exchange_commission_percent = profile_form.cleaned_data.get('exchange_commission_percent', 5.00)

                    if 'avatar' in request.FILES:
                        profile.avatar = request.FILES['avatar']

                    profile.save()
                    messages.success(request, f"âœ“ {user.username} muvaffaqiyatli yaratildi!")
                    return redirect('users:dashboard')
            except Exception as e:
                messages.error(request, f"Xatolik: {str(e)}")
    else:
        user_form = UserRegistrationForm()
        profile_form = UserProfileForm()

    return render(request, 'users/user_form.html', {
        'user_form': user_form,
        'profile_form': profile_form,
        'title': "Yangi Foydalanuvchi",
        'submit_text': "Yaratish",
    })


@login_required
def user_edit(request, pk):
    """Foydalanuvchini tahrirlash"""
    if not is_boss(request.user):
        messages.error(request, "Sizda bu amalni bajarish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    profile = get_object_or_404(UserProfile, pk=pk)

    if request.method == 'POST':
        user_form = UserEditForm(request.POST, instance=profile.user)
        profile_form = UserProfileForm(request.POST, request.FILES, instance=profile)

        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, "âœ“ Ma'lumotlar yangilandi!")
            return redirect('users:dashboard')
    else:
        user_form = UserEditForm(instance=profile.user)
        profile_form = UserProfileForm(instance=profile)

    return render(request, 'users/user_form.html', {
        'user_form': user_form,
        'profile_form': profile_form,
        'profile': profile,
        'title': "Tahrirlash",
        'submit_text': "Saqlash",
    })


@login_required
def user_delete(request, pk):
    """Foydalanuvchini o'chirish"""
    if not is_boss(request.user):
        messages.error(request, "Sizda bu amalni bajarish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    profile = get_object_or_404(UserProfile, pk=pk)

    if profile.user == request.user:
        messages.error(request, "O'zingizni o'chira olmaysiz!")
        return redirect('users:dashboard')

    if request.method == 'POST':
        username = profile.user.username
        profile.user.delete()
        messages.success(request, f"âœ“ {username} o'chirildi!")
        return redirect('users:dashboard')

    return render(request, 'users/user_delete.html', {'profile': profile})


@login_required
def user_detail(request, pk):
    """Foydalanuvchi tafsilotlari"""
    profile = get_object_or_404(UserProfile, pk=pk)

    if not is_boss(request.user) and profile.user != request.user:
        messages.error(request, "Sizda bu ma'lumotlarni ko'rish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    sample_commission = profile.calculate_commission(
        phone_profit_usd=1000,
        accessory_profit_uzs=5000000,
        exchange_profit_usd=500
    )

    return render(request, 'users/user_detail.html', {
        'profile': profile,
        'sample_commission': sample_commission,
    })