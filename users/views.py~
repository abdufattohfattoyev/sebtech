from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.contrib.auth.models import User
from django.db import transaction
from django.db.models import Q
from .models import UserProfile
from .forms import UserRegistrationForm, UserProfileForm, UserEditForm


def is_boss(user):
    """Rahbar ekanligini tekshirish"""
    try:
        return user.userprofile.role == 'boss'
    except:
        return False


@login_required
def dashboard(request):
    """Foydalanuvchilar ro'yxati va statistika"""
    profile = UserProfile.objects.get_or_create(user=request.user)[0]

    if is_boss(request.user):
        users = UserProfile.objects.select_related('user').all()

        # Filter by role
        role_filter = request.GET.get('role')
        if role_filter:
            users = users.filter(role=role_filter)

        # Search
        search = request.GET.get('search')
        if search:
            users = users.filter(
                Q(user__username__icontains=search) |
                Q(user__first_name__icontains=search) |
                Q(user__last_name__icontains=search) |
                Q(phone_number__icontains=search)
            )

        # Pagination
        paginator = Paginator(users, 15)
        page_obj = paginator.get_page(request.GET.get('page', 1))

        # Statistics
        stats = {
            'total': UserProfile.objects.count(),
            'active': UserProfile.objects.filter(user__is_active=True).count(),
            'inactive': UserProfile.objects.filter(user__is_active=False).count(),
            'boss': UserProfile.objects.filter(role='boss').count(),
            'seller': UserProfile.objects.filter(role='seller').count(),
            'finance': UserProfile.objects.filter(role='finance').count(),
        }
    else:
        page_obj = None
        stats = None

    return render(request, 'users/dashboard.html', {
        'page_obj': page_obj,
        'stats': stats,
        'is_boss': is_boss(request.user),
        'profile': profile,
        'role_choices': UserProfile.ROLE_CHOICES,
    })


@login_required
def my_profile(request):
    """O'z profilini tahrirlash"""
    profile, _ = UserProfile.objects.get_or_create(user=request.user)

    if request.method == 'POST':
        user_form = UserEditForm(request.POST, instance=request.user)
        profile_form = UserProfileForm(request.POST, request.FILES, instance=profile)

        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, "Profil muvaffaqiyatli yangilandi!")
            return redirect('users:my_profile')
    else:
        user_form = UserEditForm(instance=request.user)
        profile_form = UserProfileForm(instance=profile)

    return render(request, 'users/user_form.html', {
        'user_form': user_form,
        'profile_form': profile_form,
        'profile': profile,
        'title': "Mening Profilim",
        'submit_text': "Saqlash",
    })


@login_required
def user_create(request):
    """Yangi foydalanuvchi yaratish - faqat rahbar"""
    if not is_boss(request.user):
        messages.error(request, "Sizda bu amalni bajarish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    if request.method == 'POST':
        user_form = UserRegistrationForm(request.POST)
        profile_form = UserProfileForm(request.POST, request.FILES)

        if user_form.is_valid() and profile_form.is_valid():
            try:
                with transaction.atomic():
                    # Avval foydalanuvchini yaratish
                    user = user_form.save()

                    # Agar UserProfile allaqachon mavjud bo'lsa (signal orqali), uni yangilash
                    profile, created = UserProfile.objects.get_or_create(user=user)

                    # Profile formdan ma'lumotlarni yangilash
                    profile.role = profile_form.cleaned_data['role']
                    profile.phone_number = profile_form.cleaned_data.get('phone_number')
                    profile.base_salary_usd = profile_form.cleaned_data.get('base_salary_usd', 0)
                    profile.base_salary_uzs = profile_form.cleaned_data.get('base_salary_uzs', 0)
                    profile.phone_commission_percent = profile_form.cleaned_data.get('phone_commission_percent', 5.00)
                    profile.accessory_commission_percent = profile_form.cleaned_data.get('accessory_commission_percent',
                                                                                         10.00)
                    profile.exchange_commission_percent = profile_form.cleaned_data.get('exchange_commission_percent',
                                                                                        5.00)

                    if 'avatar' in request.FILES:
                        profile.avatar = request.FILES['avatar']

                    profile.save()

                    messages.success(request, f"✓ {user.username} muvaffaqiyatli yaratildi!")
                    return redirect('users:dashboard')
            except Exception as e:
                messages.error(request, f"Xatolik: {str(e)}")
    else:
        user_form = UserRegistrationForm()
        profile_form = UserProfileForm()

    return render(request, 'users/user_form.html', {
        'user_form': user_form,
        'profile_form': profile_form,
        'title': "Yangi Foydalanuvchi",
        'submit_text': "Yaratish",
    })


@login_required
def user_edit(request, pk):
    """Foydalanuvchini tahrirlash - faqat rahbar"""
    if not is_boss(request.user):
        messages.error(request, "Sizda bu amalni bajarish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    profile = get_object_or_404(UserProfile, pk=pk)

    if request.method == 'POST':
        user_form = UserEditForm(request.POST, instance=profile.user)
        profile_form = UserProfileForm(request.POST, request.FILES, instance=profile)

        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, "✓ Ma'lumotlar yangilandi!")
            return redirect('users:dashboard')
    else:
        user_form = UserEditForm(instance=profile.user)
        profile_form = UserProfileForm(instance=profile)

    return render(request, 'users/user_form.html', {
        'user_form': user_form,
        'profile_form': profile_form,
        'profile': profile,
        'title': "Tahrirlash",
        'submit_text': "Saqlash",
    })


@login_required
def user_delete(request, pk):
    """Foydalanuvchini o'chirish - faqat rahbar"""
    if not is_boss(request.user):
        messages.error(request, "Sizda bu amalni bajarish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    profile = get_object_or_404(UserProfile, pk=pk)

    # O'zini o'chirishga ruxsat bermaslik
    if profile.user == request.user:
        messages.error(request, "O'zingizni o'chira olmaysiz!")
        return redirect('users:dashboard')

    if request.method == 'POST':
        username = profile.user.username
        profile.user.delete()
        messages.success(request, f"✓ {username} o'chirildi!")
        return redirect('users:dashboard')

    return render(request, 'users/user_delete.html', {'profile': profile})


@login_required
def user_detail(request, pk):
    """Foydalanuvchi tafsilotlari"""
    profile = get_object_or_404(UserProfile, pk=pk)

    # Faqat o'zini yoki rahbar ko'rishi mumkin
    if not is_boss(request.user) and profile.user != request.user:
        messages.error(request, "Sizda bu ma'lumotlarni ko'rish uchun ruxsat yo'q!")
        return redirect('users:dashboard')

    # Komissiya namunasi
    sample_commission = profile.calculate_commission(
        phone_profit_usd=1000,
        accessory_profit_uzs=5000000,
        exchange_profit_usd=500
    )

    return render(request, 'users/user_detail.html', {
        'profile': profile,
        'sample_commission': sample_commission,
    })